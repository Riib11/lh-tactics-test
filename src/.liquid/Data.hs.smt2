(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-datatypes ((Data.N 0)) ((par () (Data.Z (Data.S (lqdc$35$$35$$36$select$35$$35$Data.S$35$$35$1 Data.N))))))
(declare-datatypes ((Data.NL 0)) ((par () (Data.Nil (Data.Cons (lqdc$35$$35$$36$select$35$$35$Data.Cons$35$$35$2 Data.N) (lqdc$35$$35$$36$select$35$$35$Data.Cons$35$$35$1 Data.NL))))))
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803395$35$$35$d2xZ () Data.N)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun Data.countNL () Int)
(declare-fun papp6 () Int)
(declare-fun Data.takeNL () Int)
(declare-fun lit$36$NL () Str)
(declare-fun GHC.List.iterate () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803389$35$$35$d2xT () Data.N)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun lq_tmp$36$x$35$$35$1255 () Data.NL)
(declare-fun lq_anf$36$$35$$35$7205759403792803408$35$$35$d2yc () Data.NL)
(declare-fun GHC.Show.showParen () Int)
(declare-fun lq_tmp$36$x$35$$35$1651 () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive () Str)
(declare-fun GHC.Show.$36$dmshow () Int)
(declare-fun VV$35$$35$F$35$$35$16 () Str)
(declare-fun GHC.List.splitAt () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803415$35$$35$d2yj () Data.NL)
(declare-fun fst () Int)
(declare-fun GHC.Show.showString () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun snd () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun GHC.List.break () Int)
(declare-fun Data.addN () Int)
(declare-fun lq_tmp$36$x$35$$35$1495 () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun Control.Exception.Base.patError () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun lit$36$N () Str)
(declare-fun GHC.Classes.$36$dm$47$$61$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803404$35$$35$d2y8 () Str)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun GHC.Show.$36$dmshowList () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun h$35$$35$a1y1 () Data.N)
(declare-fun Data.Foldable.null () Int)
(declare-fun Data.concatNL () Int)
(declare-fun papp1 () Int)
(declare-fun fix$36$$36$c$47$$61$$35$$35$a1BJ () Int)
(declare-fun lit$36$lh$45$tactics$45$test$45$0.1.0.0$45$6lICFxXVHY31MfrqHLaYxI () Str)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun papp4 () Int)
(declare-fun m$35$$35$a1xX () Data.N)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun Data.$36$fShowNL () Int)
(declare-fun Data.dropNL () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803409$35$$35$d2yd () Data.N)
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun lit$36$Z () Str)
(declare-fun l2$35$$35$a1y0 () Data.NL)
(declare-fun VV$35$$35$F$35$$35$13 () Str)
(declare-fun GHC.Base.id () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun n$35$$35$a1yc () Data.N)
(declare-fun addrLen () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun h$35$$35$a1ye () Data.N)
(declare-fun lq_tmp$36$x$35$$35$1147 () Data.NL)
(declare-fun is$36$GHC.Types.C$35$ () Int)
(declare-fun lit$36$$39$Nil () Str)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun ds_d2vA () Data.N)
(declare-fun fix$36$$36$cshowList$35$$35$a1Bu () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun n$35$$35$a1xW () Data.N)
(declare-fun Data.Tuple.snd () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun GHC.Classes.C$58$Eq () Int)
(declare-fun fix$36$$36$cshow$35$$35$a1Bo () Int)
(declare-fun l1$35$$35$a1y2 () Data.NL)
(declare-fun n$35$$35$a1xP () Data.N)
(declare-fun totalityError () Int)
(declare-fun fix$36$$36$c$61$$61$$35$$35$a1BC () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun n$35$$35$a1y9 () Data.N)
(declare-fun lq_anf$36$$35$$35$7205759403792803393$35$$35$d2xX () Data.N)
(declare-fun lq_anf$36$$35$$35$7205759403792803402$35$$35$d2y6 () Data.N)
(declare-fun GHC.List.scanr () Int)
(declare-fun papp2 () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803403$35$$35$d2y7 () Data.NL)
(declare-fun l$35$$35$a1y6 () Data.NL)
(declare-fun ds_d2wb () Data.N)
(declare-fun n$35$$35$a1y4 () Data.N)
(declare-fun lq_anf$36$$35$$35$7205759403792803401$35$$35$d2y5 () Data.NL)
(declare-fun GHC.Show.showSpace () Int)
(declare-fun tail () Int)
(declare-fun ds_d2vP () Data.N)
(declare-fun charX () Int)
(declare-fun Data.leqN () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun GHC.Types.krep$36$$42$ () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun ds_d2vu () Data.NL)
(declare-fun lq_anf$36$$35$$35$7205759403792803392$35$$35$d2xW () Str)
(declare-fun GHC.List.zip () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun GHC.CString.unpackCString$35$ () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803390$35$$35$d2xU () Data.N)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803407$35$$35$d2yb () Data.NL)
(declare-fun GHC.Types.False () Bool)
(declare-fun isJust () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun GHC.List.span () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun VV$35$$35$F$35$$35$15 () Str)
(declare-fun lq_tmp$36$x$35$$35$1095 () Data.N)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803396$35$$35$d2y0 () Data.N)
(declare-fun len () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun ds_d2wv () Data.N)
(declare-fun lq_tmp$36$x$35$$35$923 () Data.N)
(declare-fun l$35$$35$a1yb () Data.NL)
(declare-fun GHC.List.last () Int)
(declare-fun fix$36$$36$cshow$35$$35$a1C3 () Int)
(declare-fun lq_tmp$36$x$35$$35$1398 () Data.NL)
(declare-fun fix$36$$36$cshowList$35$$35$a1C9 () Int)
(declare-fun m$35$$35$a1xQ () Data.N)
(declare-fun GHC.Real.rem () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun lit$36$Nil () Str)
(declare-fun GHC.Num.negate () Int)
(declare-fun papp7 () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun h$35$$35$a1y7 () Data.N)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.Show.showsPrec () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803412$35$$35$d2yg () Data.NL)
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun lit$36$$39$Cons () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792803410$35$$35$d2ye () Data.NL)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun lq_tmp$36$x$35$$35$1481 () Int)
(declare-fun lit$36$$39$Z () Str)
(declare-fun lq_tmp$36$x$35$$35$1871 () Data.NL)
(declare-fun lq_anf$36$$35$$35$7205759403792803406$35$$35$d2ya () Data.N)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.C$35$$35$$35$1 () Int)
(declare-fun head () Int)
(declare-fun h$35$$35$a1ya () Data.N)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun cast_as () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803413$35$$35$d2yh () Str)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun ds_d2w4 () Data.NL)
(declare-fun lit$36$Data () Str)
(declare-fun VV$35$$35$F$35$$35$12 () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792803394$35$$35$d2xY () Str)
(declare-fun fix$36$$36$cshowsPrec$35$$35$a1B4 () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun lit$36$src$47$Data.hs$58$$40$49$44$1$41$$45$$40$51$44$36$41$$124$function$32$dropNL () Str)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun Data.$36$fEqNL () Int)
(declare-fun ds_d2vB () Data.NL)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun fix$36$$36$c$61$$61$$35$$35$a1AL () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803391$35$$35$d2xV () Data.N)
(declare-fun GHC.List.drop () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun papp5 () Int)
(declare-fun Data.subN () Int)
(declare-fun GHC.Classes.$36$fOrdInt () Int)
(declare-fun lit$36$Cons$32$ () Str)
(declare-fun x_Tuple21 () Int)
(declare-fun GHC.List.init () Int)
(declare-fun h$35$$35$a1y5 () Data.N)
(declare-fun n$35$$35$a1xZ () Data.N)
(declare-fun ds_d2vQ () Data.NL)
(declare-fun lit$36$$39$S () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792803411$35$$35$d2yf () Str)
(declare-fun Data.Tuple.fst () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun lit$36$src$47$Data.hs$58$$40$19$44$1$41$$45$$40$21$44$27$41$$124$function$32$subN () Str)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun Data.$36$fShowN () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun Data.$36$fEqN () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun GHC.List.head () Int)
(declare-fun fromJust () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun lit$36$S$32$ () Str)
(declare-fun GHC.Classes.compare () Int)
(declare-fun lit$36$src$47$Data.hs$58$$40$43$44$1$41$$45$$40$45$44$45$41$$124$function$32$takeNL () Str)
(declare-fun VV$35$$35$F$35$$35$14 () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792803414$35$$35$d2yi () Data.N)
(declare-fun l$35$$35$a1yf () Data.NL)
(declare-fun fix$36$$36$cshowsPrec$35$$35$a1BR () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1665 () Int)
(declare-fun fix$36$$36$c$47$$61$$35$$35$a1AW () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun m$35$$35$a1xU () Data.N)
(declare-fun ds_d2wi () Data.N)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun autolen () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun n$35$$35$a1xV () Data.N)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun l$35$$35$a1y8 () Data.NL)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun GHC.Show.C$58$Show () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun n$35$$35$a1xS () Data.N)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.List.take () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun lq_tmp$36$x$35$$35$1040 () Data.N)
(declare-fun papp3 () Int)
(declare-fun apply$35$$35$17 (Int Str) Data.NL)
(declare-fun apply$35$$35$32 (Int Data.NL) Str)
(declare-fun apply$35$$35$19 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$34 (Int Data.NL) Data.N)
(declare-fun apply$35$$35$10 (Int Bool) Data.N)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$28 (Int Data.N) Data.N)
(declare-fun apply$35$$35$21 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$31 (Int Data.NL) Bool)
(declare-fun apply$35$$35$20 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$13 (Int Str) Bool)
(declare-fun apply$35$$35$6 (Int Bool) Int)
(declare-fun apply$35$$35$16 (Int Str) Data.N)
(declare-fun apply$35$$35$24 (Int Data.N) Int)
(declare-fun apply$35$$35$14 (Int Str) Str)
(declare-fun apply$35$$35$15 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$23 (Int (_ BitVec 32)) Data.NL)
(declare-fun apply$35$$35$29 (Int Data.N) Data.NL)
(declare-fun apply$35$$35$18 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$12 (Int Str) Int)
(declare-fun apply$35$$35$26 (Int Data.N) Str)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$35 (Int Data.NL) Data.NL)
(declare-fun apply$35$$35$8 (Int Bool) Str)
(declare-fun apply$35$$35$9 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$5 (Int Int) Data.NL)
(declare-fun apply$35$$35$30 (Int Data.NL) Int)
(declare-fun apply$35$$35$25 (Int Data.N) Bool)
(declare-fun apply$35$$35$27 (Int Data.N) (_ BitVec 32))
(declare-fun apply$35$$35$22 (Int (_ BitVec 32)) Data.N)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$7 (Int Bool) Bool)
(declare-fun apply$35$$35$4 (Int Int) Data.N)
(declare-fun apply$35$$35$11 (Int Bool) Data.NL)
(declare-fun apply$35$$35$33 (Int Data.NL) (_ BitVec 32))
(declare-fun coerce$35$$35$17 (Str) Data.NL)
(declare-fun coerce$35$$35$32 (Data.NL) Str)
(declare-fun coerce$35$$35$19 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$34 (Data.NL) Data.N)
(declare-fun coerce$35$$35$10 (Bool) Data.N)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$28 (Data.N) Data.N)
(declare-fun coerce$35$$35$21 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$31 (Data.NL) Bool)
(declare-fun coerce$35$$35$20 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$13 (Str) Bool)
(declare-fun coerce$35$$35$6 (Bool) Int)
(declare-fun coerce$35$$35$16 (Str) Data.N)
(declare-fun coerce$35$$35$24 (Data.N) Int)
(declare-fun coerce$35$$35$14 (Str) Str)
(declare-fun coerce$35$$35$15 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$23 ((_ BitVec 32)) Data.NL)
(declare-fun coerce$35$$35$29 (Data.N) Data.NL)
(declare-fun coerce$35$$35$18 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$12 (Str) Int)
(declare-fun coerce$35$$35$26 (Data.N) Str)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$35 (Data.NL) Data.NL)
(declare-fun coerce$35$$35$8 (Bool) Str)
(declare-fun coerce$35$$35$9 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$5 (Int) Data.NL)
(declare-fun coerce$35$$35$30 (Data.NL) Int)
(declare-fun coerce$35$$35$25 (Data.N) Bool)
(declare-fun coerce$35$$35$27 (Data.N) (_ BitVec 32))
(declare-fun coerce$35$$35$22 ((_ BitVec 32)) Data.N)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$7 (Bool) Bool)
(declare-fun coerce$35$$35$4 (Int) Data.N)
(declare-fun coerce$35$$35$11 (Bool) Data.NL)
(declare-fun coerce$35$$35$33 (Data.NL) (_ BitVec 32))
(declare-fun smt_lambda$35$$35$17 (Str Data.NL) Int)
(declare-fun smt_lambda$35$$35$32 (Data.NL Str) Int)
(declare-fun smt_lambda$35$$35$19 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$34 (Data.NL Data.N) Int)
(declare-fun smt_lambda$35$$35$10 (Bool Data.N) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$28 (Data.N Data.N) Int)
(declare-fun smt_lambda$35$$35$21 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$31 (Data.NL Bool) Int)
(declare-fun smt_lambda$35$$35$20 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$13 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$16 (Str Data.N) Int)
(declare-fun smt_lambda$35$$35$24 (Data.N Int) Int)
(declare-fun smt_lambda$35$$35$14 (Str Str) Int)
(declare-fun smt_lambda$35$$35$15 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$23 ((_ BitVec 32) Data.NL) Int)
(declare-fun smt_lambda$35$$35$29 (Data.N Data.NL) Int)
(declare-fun smt_lambda$35$$35$18 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$12 (Str Int) Int)
(declare-fun smt_lambda$35$$35$26 (Data.N Str) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$35 (Data.NL Data.NL) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$5 (Int Data.NL) Int)
(declare-fun smt_lambda$35$$35$30 (Data.NL Int) Int)
(declare-fun smt_lambda$35$$35$25 (Data.N Bool) Int)
(declare-fun smt_lambda$35$$35$27 (Data.N (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$22 ((_ BitVec 32) Data.N) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$4 (Int Data.N) Int)
(declare-fun smt_lambda$35$$35$11 (Bool Data.NL) Int)
(declare-fun smt_lambda$35$$35$33 (Data.NL (_ BitVec 32)) Int)
(declare-fun lam_arg$35$$35$1$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$24 () Data.N)
(declare-fun lam_arg$35$$35$2$35$$35$24 () Data.N)
(declare-fun lam_arg$35$$35$3$35$$35$24 () Data.N)
(declare-fun lam_arg$35$$35$4$35$$35$24 () Data.N)
(declare-fun lam_arg$35$$35$5$35$$35$24 () Data.N)
(declare-fun lam_arg$35$$35$6$35$$35$24 () Data.N)
(declare-fun lam_arg$35$$35$7$35$$35$24 () Data.N)
(declare-fun lam_arg$35$$35$1$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$30 () Data.NL)
(declare-fun lam_arg$35$$35$2$35$$35$30 () Data.NL)
(declare-fun lam_arg$35$$35$3$35$$35$30 () Data.NL)
(declare-fun lam_arg$35$$35$4$35$$35$30 () Data.NL)
(declare-fun lam_arg$35$$35$5$35$$35$30 () Data.NL)
(declare-fun lam_arg$35$$35$6$35$$35$30 () Data.NL)
(declare-fun lam_arg$35$$35$7$35$$35$30 () Data.NL)
(assert (distinct lit$36$src$47$Data.hs$58$$40$43$44$1$41$$45$$40$45$44$45$41$$124$function$32$takeNL lit$36$S$32$ lit$36$src$47$Data.hs$58$$40$19$44$1$41$$45$$40$21$44$27$41$$124$function$32$subN lit$36$$39$S lit$36$Cons$32$ lit$36$src$47$Data.hs$58$$40$49$44$1$41$$45$$40$51$44$36$41$$124$function$32$dropNL lit$36$Data lit$36$$39$Z lit$36$$39$Cons lit$36$Nil lit$36$$39$Nil lit$36$Z lit$36$lh$45$tactics$45$test$45$0.1.0.0$45$6lICFxXVHY31MfrqHLaYxI lit$36$N lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive lit$36$NL))




(assert (distinct GHC.Types.False GHC.Types.True))


(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))


(assert (= (strLen lit$36$NL) 2))
(assert (= (strLen lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive) 36))
(assert (= (strLen lit$36$N) 1))
(assert (= (strLen lit$36$lh$45$tactics$45$test$45$0.1.0.0$45$6lICFxXVHY31MfrqHLaYxI) 46))
(assert (= (strLen lit$36$Z) 1))
(assert (= (strLen lit$36$$39$Nil) 4))
(assert (= (strLen lit$36$Nil) 3))
(assert (= (strLen lit$36$$39$Cons) 5))
(assert (= (strLen lit$36$$39$Z) 2))
(assert (= (strLen lit$36$Data) 4))
(assert (= (strLen lit$36$src$47$Data.hs$58$$40$49$44$1$41$$45$$40$51$44$36$41$$124$function$32$dropNL) 42))
(assert (= (strLen lit$36$Cons$32$) 5))
(assert (= (strLen lit$36$$39$S) 2))
(assert (= (strLen lit$36$src$47$Data.hs$58$$40$19$44$1$41$$45$$40$21$44$27$41$$124$function$32$subN) 40))
(assert (= (strLen lit$36$S$32$) 2))
(assert (= (strLen lit$36$src$47$Data.hs$58$$40$43$44$1$41$$45$$40$45$44$45$41$$124$function$32$takeNL) 42))
(push 1)
(define-fun b$36$$35$$35$161 () Bool (= lq_anf$36$$35$$35$7205759403792803389$35$$35$d2xT ds_d2wi))
(define-fun b$36$$35$$35$226 () Bool (= lq_anf$36$$35$$35$7205759403792803402$35$$35$d2y6 ds_d2vP))
(define-fun b$36$$35$$35$99 () Bool GHC.Types.True)
(define-fun b$36$$35$$35$259 () Bool (= lq_anf$36$$35$$35$7205759403792803409$35$$35$d2yd ds_d2vA))
(define-fun b$36$$35$$35$164 () Bool (= lq_anf$36$$35$$35$7205759403792803389$35$$35$d2xT ds_d2wi))
(define-fun b$36$$35$$35$228 () Bool (and (is-Data.S lq_anf$36$$35$$35$7205759403792803402$35$$35$d2y6) (not (is-Data.Z lq_anf$36$$35$$35$7205759403792803402$35$$35$d2y6)) (= lq_anf$36$$35$$35$7205759403792803402$35$$35$d2y6 ds_d2vP) (= lq_anf$36$$35$$35$7205759403792803402$35$$35$d2y6 (Data.S n$35$$35$a1y4)) (= (lqdc$35$$35$$36$select$35$$35$Data.S$35$$35$1 lq_anf$36$$35$$35$7205759403792803402$35$$35$d2y6) n$35$$35$a1y4)))
(define-fun b$36$$35$$35$229 () Bool (= lq_anf$36$$35$$35$7205759403792803403$35$$35$d2y7 ds_d2vQ))
(define-fun b$36$$35$$35$261 () Bool (and (is-Data.S lq_anf$36$$35$$35$7205759403792803409$35$$35$d2yd) (not (is-Data.Z lq_anf$36$$35$$35$7205759403792803409$35$$35$d2yd)) (= lq_anf$36$$35$$35$7205759403792803409$35$$35$d2yd ds_d2vA) (= lq_anf$36$$35$$35$7205759403792803409$35$$35$d2yd (Data.S n$35$$35$a1y9)) (= (lqdc$35$$35$$36$select$35$$35$Data.S$35$$35$1 lq_anf$36$$35$$35$7205759403792803409$35$$35$d2yd) n$35$$35$a1y9)))
(define-fun b$36$$35$$35$166 () Bool (and (is-Data.S lq_anf$36$$35$$35$7205759403792803389$35$$35$d2xT) (not (is-Data.Z lq_anf$36$$35$$35$7205759403792803389$35$$35$d2xT)) (= lq_anf$36$$35$$35$7205759403792803389$35$$35$d2xT ds_d2wi) (= lq_anf$36$$35$$35$7205759403792803389$35$$35$d2xT (Data.S lq_anf$36$$35$$35$7205759403792803396$35$$35$d2y0)) (= (lqdc$35$$35$$36$select$35$$35$Data.S$35$$35$1 lq_anf$36$$35$$35$7205759403792803389$35$$35$d2xT) lq_anf$36$$35$$35$7205759403792803396$35$$35$d2y0)))
(define-fun b$36$$35$$35$230 () Bool (= lq_anf$36$$35$$35$7205759403792803403$35$$35$d2y7 ds_d2vQ))
(define-fun b$36$$35$$35$262 () Bool (= lq_anf$36$$35$$35$7205759403792803412$35$$35$d2yg ds_d2vB))
(define-fun b$36$$35$$35$167 () Bool (= lq_anf$36$$35$$35$7205759403792803390$35$$35$d2xU n$35$$35$a1xS))
(define-fun b$36$$35$$35$231 () Bool (and (is-Data.Nil lq_anf$36$$35$$35$7205759403792803403$35$$35$d2y7) (not (is-Data.Cons lq_anf$36$$35$$35$7205759403792803403$35$$35$d2y7)) (= lq_anf$36$$35$$35$7205759403792803403$35$$35$d2y7 Data.Nil) (= lq_anf$36$$35$$35$7205759403792803403$35$$35$d2y7 ds_d2vQ)))
(define-fun b$36$$35$$35$263 () Bool (= lq_anf$36$$35$$35$7205759403792803412$35$$35$d2yg ds_d2vB))
(define-fun b$36$$35$$35$136 () Bool (and (is-Data.Z Data.Z) (not (is-Data.S Data.Z)) (= Data.Z Data.Z)))
(define-fun b$36$$35$$35$232 () Bool (= lq_anf$36$$35$$35$7205759403792803404$35$$35$d2y8 lit$36$src$47$Data.hs$58$$40$43$44$1$41$$45$$40$45$44$45$41$$124$function$32$takeNL))
(define-fun b$36$$35$$35$264 () Bool (and (is-Data.Nil lq_anf$36$$35$$35$7205759403792803412$35$$35$d2yg) (not (is-Data.Cons lq_anf$36$$35$$35$7205759403792803412$35$$35$d2yg)) (= lq_anf$36$$35$$35$7205759403792803412$35$$35$d2yg Data.Nil) (= lq_anf$36$$35$$35$7205759403792803412$35$$35$d2yg ds_d2vB)))
(define-fun b$36$$35$$35$41 () Bool (= GHC.Types.True GHC.Types.True))
(define-fun b$36$$35$$35$265 () Bool (= lq_anf$36$$35$$35$7205759403792803413$35$$35$d2yh lit$36$src$47$Data.hs$58$$40$49$44$1$41$$45$$40$51$44$36$41$$124$function$32$dropNL))
(define-fun b$36$$35$$35$138 () Bool (and (is-Data.Nil Data.Nil) (not (is-Data.Cons Data.Nil)) (= Data.Nil Data.Nil)))
(define-fun b$36$$35$$35$170 () Bool (= lq_anf$36$$35$$35$7205759403792803390$35$$35$d2xU n$35$$35$a1xS))
(define-fun b$36$$35$$35$44 () Bool (= Data.$36$fShowNL Data.$36$fShowNL))
(define-fun b$36$$35$$35$172 () Bool (and (is-Data.S lq_anf$36$$35$$35$7205759403792803390$35$$35$d2xU) (not (is-Data.Z lq_anf$36$$35$$35$7205759403792803390$35$$35$d2xU)) (= lq_anf$36$$35$$35$7205759403792803390$35$$35$d2xU n$35$$35$a1xS) (= lq_anf$36$$35$$35$7205759403792803390$35$$35$d2xU (Data.S lq_anf$36$$35$$35$7205759403792803395$35$$35$d2xZ)) (= (lqdc$35$$35$$36$select$35$$35$Data.S$35$$35$1 lq_anf$36$$35$$35$7205759403792803390$35$$35$d2xU) lq_anf$36$$35$$35$7205759403792803395$35$$35$d2xZ)))
(define-fun b$36$$35$$35$173 () Bool (= lq_anf$36$$35$$35$7205759403792803391$35$$35$d2xV ds_d2wi))
(define-fun b$36$$35$$35$174 () Bool (= lq_anf$36$$35$$35$7205759403792803391$35$$35$d2xV ds_d2wi))
(define-fun b$36$$35$$35$366 () Bool (and (= VV$35$$35$F$35$$35$12 lit$36$src$47$Data.hs$58$$40$49$44$1$41$$45$$40$51$44$36$41$$124$function$32$dropNL) (= VV$35$$35$F$35$$35$12 lq_anf$36$$35$$35$7205759403792803413$35$$35$d2yh)))
(define-fun b$36$$35$$35$175 () Bool (and (is-Data.Z lq_anf$36$$35$$35$7205759403792803391$35$$35$d2xV) (not (is-Data.S lq_anf$36$$35$$35$7205759403792803391$35$$35$d2xV)) (= lq_anf$36$$35$$35$7205759403792803391$35$$35$d2xV Data.Z) (= lq_anf$36$$35$$35$7205759403792803391$35$$35$d2xV ds_d2wi)))
(define-fun b$36$$35$$35$367 () Bool (and (= VV$35$$35$F$35$$35$13 lit$36$src$47$Data.hs$58$$40$49$44$1$41$$45$$40$51$44$36$41$$124$function$32$dropNL) (= VV$35$$35$F$35$$35$13 lq_anf$36$$35$$35$7205759403792803411$35$$35$d2yf)))
(define-fun b$36$$35$$35$176 () Bool (= lq_anf$36$$35$$35$7205759403792803392$35$$35$d2xW lit$36$src$47$Data.hs$58$$40$19$44$1$41$$45$$40$21$44$27$41$$124$function$32$subN))
(define-fun b$36$$35$$35$368 () Bool (and (= VV$35$$35$F$35$$35$14 lit$36$src$47$Data.hs$58$$40$43$44$1$41$$45$$40$45$44$45$41$$124$function$32$takeNL) (= VV$35$$35$F$35$$35$14 lq_anf$36$$35$$35$7205759403792803404$35$$35$d2y8)))
(define-fun b$36$$35$$35$49 () Bool (= Data.Nil Data.Nil))
(define-fun b$36$$35$$35$177 () Bool (= lq_anf$36$$35$$35$7205759403792803391$35$$35$d2xV ds_d2wi))
(define-fun b$36$$35$$35$241 () Bool (= lq_anf$36$$35$$35$7205759403792803408$35$$35$d2yc ds_d2vB))
(define-fun b$36$$35$$35$369 () Bool (and (= VV$35$$35$F$35$$35$15 lit$36$src$47$Data.hs$58$$40$19$44$1$41$$45$$40$21$44$27$41$$124$function$32$subN) (= VV$35$$35$F$35$$35$15 lq_anf$36$$35$$35$7205759403792803394$35$$35$d2xY)))
(define-fun b$36$$35$$35$50 () Bool (= GHC.Types.False GHC.Types.False))
(define-fun b$36$$35$$35$370 () Bool (and (= VV$35$$35$F$35$$35$16 lit$36$src$47$Data.hs$58$$40$19$44$1$41$$45$$40$21$44$27$41$$124$function$32$subN) (= VV$35$$35$F$35$$35$16 lq_anf$36$$35$$35$7205759403792803392$35$$35$d2xW)))
(define-fun b$36$$35$$35$179 () Bool (and (is-Data.S lq_anf$36$$35$$35$7205759403792803391$35$$35$d2xV) (not (is-Data.Z lq_anf$36$$35$$35$7205759403792803391$35$$35$d2xV)) (= lq_anf$36$$35$$35$7205759403792803391$35$$35$d2xV ds_d2wi) (= lq_anf$36$$35$$35$7205759403792803391$35$$35$d2xV (Data.S m$35$$35$a1xU)) (= (lqdc$35$$35$$36$select$35$$35$Data.S$35$$35$1 lq_anf$36$$35$$35$7205759403792803391$35$$35$d2xV) m$35$$35$a1xU)))
(define-fun b$36$$35$$35$52 () Bool (= Data.$36$fEqNL Data.$36$fEqNL))
(define-fun b$36$$35$$35$180 () Bool (= lq_anf$36$$35$$35$7205759403792803393$35$$35$d2xX n$35$$35$a1xS))
(define-fun b$36$$35$$35$244 () Bool (= lq_anf$36$$35$$35$7205759403792803408$35$$35$d2yc ds_d2vB))
(define-fun b$36$$35$$35$181 () Bool (= lq_anf$36$$35$$35$7205759403792803393$35$$35$d2xX n$35$$35$a1xS))
(define-fun b$36$$35$$35$54 () Bool (= Data.Z Data.Z))
(define-fun b$36$$35$$35$182 () Bool (and (is-Data.Z lq_anf$36$$35$$35$7205759403792803393$35$$35$d2xX) (not (is-Data.S lq_anf$36$$35$$35$7205759403792803393$35$$35$d2xX)) (= lq_anf$36$$35$$35$7205759403792803393$35$$35$d2xX Data.Z) (= lq_anf$36$$35$$35$7205759403792803393$35$$35$d2xX n$35$$35$a1xS)))
(define-fun b$36$$35$$35$55 () Bool (= Data.$36$fShowN Data.$36$fShowN))
(define-fun b$36$$35$$35$183 () Bool (= lq_anf$36$$35$$35$7205759403792803394$35$$35$d2xY lit$36$src$47$Data.hs$58$$40$19$44$1$41$$45$$40$21$44$27$41$$124$function$32$subN))
(define-fun b$36$$35$$35$247 () Bool (and (is-Data.Cons lq_anf$36$$35$$35$7205759403792803408$35$$35$d2yc) (not (is-Data.Nil lq_anf$36$$35$$35$7205759403792803408$35$$35$d2yc)) (= lq_anf$36$$35$$35$7205759403792803408$35$$35$d2yc ds_d2vB) (= lq_anf$36$$35$$35$7205759403792803408$35$$35$d2yc (Data.Cons lq_anf$36$$35$$35$7205759403792803414$35$$35$d2yi lq_anf$36$$35$$35$7205759403792803415$35$$35$d2yj)) (= (lqdc$35$$35$$36$select$35$$35$Data.Cons$35$$35$1 lq_anf$36$$35$$35$7205759403792803408$35$$35$d2yc) lq_anf$36$$35$$35$7205759403792803415$35$$35$d2yj) (= (lqdc$35$$35$$36$select$35$$35$Data.Cons$35$$35$2 lq_anf$36$$35$$35$7205759403792803408$35$$35$d2yc) lq_anf$36$$35$$35$7205759403792803414$35$$35$d2yi)))
(define-fun b$36$$35$$35$56 () Bool (= Data.$36$fEqN Data.$36$fEqN))
(define-fun b$36$$35$$35$216 () Bool (= lq_anf$36$$35$$35$7205759403792803401$35$$35$d2y5 ds_d2vQ))
(define-fun b$36$$35$$35$248 () Bool (= lq_anf$36$$35$$35$7205759403792803409$35$$35$d2yd ds_d2vA))
(define-fun b$36$$35$$35$249 () Bool (= lq_anf$36$$35$$35$7205759403792803409$35$$35$d2yd ds_d2vA))
(define-fun b$36$$35$$35$250 () Bool (and (is-Data.Z lq_anf$36$$35$$35$7205759403792803409$35$$35$d2yd) (not (is-Data.S lq_anf$36$$35$$35$7205759403792803409$35$$35$d2yd)) (= lq_anf$36$$35$$35$7205759403792803409$35$$35$d2yd Data.Z) (= lq_anf$36$$35$$35$7205759403792803409$35$$35$d2yd ds_d2vA)))
(define-fun b$36$$35$$35$219 () Bool (= lq_anf$36$$35$$35$7205759403792803401$35$$35$d2y5 ds_d2vQ))
(define-fun b$36$$35$$35$251 () Bool (= lq_anf$36$$35$$35$7205759403792803410$35$$35$d2ye ds_d2vB))
(define-fun b$36$$35$$35$252 () Bool (= lq_anf$36$$35$$35$7205759403792803410$35$$35$d2ye ds_d2vB))
(define-fun b$36$$35$$35$253 () Bool (and (is-Data.Nil lq_anf$36$$35$$35$7205759403792803410$35$$35$d2ye) (not (is-Data.Cons lq_anf$36$$35$$35$7205759403792803410$35$$35$d2ye)) (= lq_anf$36$$35$$35$7205759403792803410$35$$35$d2ye Data.Nil) (= lq_anf$36$$35$$35$7205759403792803410$35$$35$d2ye ds_d2vB)))
(define-fun b$36$$35$$35$94 () Bool (not GHC.Types.False))
(define-fun b$36$$35$$35$222 () Bool (and (is-Data.Cons lq_anf$36$$35$$35$7205759403792803401$35$$35$d2y5) (not (is-Data.Nil lq_anf$36$$35$$35$7205759403792803401$35$$35$d2y5)) (= lq_anf$36$$35$$35$7205759403792803401$35$$35$d2y5 ds_d2vQ) (= lq_anf$36$$35$$35$7205759403792803401$35$$35$d2y5 (Data.Cons lq_anf$36$$35$$35$7205759403792803406$35$$35$d2ya lq_anf$36$$35$$35$7205759403792803407$35$$35$d2yb)) (= (lqdc$35$$35$$36$select$35$$35$Data.Cons$35$$35$1 lq_anf$36$$35$$35$7205759403792803401$35$$35$d2y5) lq_anf$36$$35$$35$7205759403792803407$35$$35$d2yb) (= (lqdc$35$$35$$36$select$35$$35$Data.Cons$35$$35$2 lq_anf$36$$35$$35$7205759403792803401$35$$35$d2y5) lq_anf$36$$35$$35$7205759403792803406$35$$35$d2ya)))
(define-fun b$36$$35$$35$254 () Bool (= lq_anf$36$$35$$35$7205759403792803411$35$$35$d2yf lit$36$src$47$Data.hs$58$$40$49$44$1$41$$45$$40$51$44$36$41$$124$function$32$dropNL))
(define-fun b$36$$35$$35$223 () Bool (= lq_anf$36$$35$$35$7205759403792803402$35$$35$d2y6 ds_d2vP))
(push 1)
(push 1)
(assert (and true b$36$$35$$35$99 b$36$$35$$35$259 b$36$$35$$35$261 b$36$$35$$35$262 b$36$$35$$35$263 b$36$$35$$35$136 b$36$$35$$35$264 b$36$$35$$35$41 b$36$$35$$35$265 b$36$$35$$35$138 b$36$$35$$35$44 b$36$$35$$35$366 b$36$$35$$35$49 b$36$$35$$35$241 b$36$$35$$35$50 b$36$$35$$35$52 b$36$$35$$35$244 b$36$$35$$35$54 b$36$$35$$35$55 b$36$$35$$35$247 b$36$$35$$35$56 b$36$$35$$35$248 b$36$$35$$35$94))
(push 1)
(assert (not (apply$35$$35$13 (as totalityError Int) lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$99 b$36$$35$$35$136 b$36$$35$$35$41 b$36$$35$$35$138 b$36$$35$$35$44 b$36$$35$$35$367 b$36$$35$$35$49 b$36$$35$$35$241 b$36$$35$$35$50 b$36$$35$$35$52 b$36$$35$$35$244 b$36$$35$$35$54 b$36$$35$$35$55 b$36$$35$$35$247 b$36$$35$$35$56 b$36$$35$$35$248 b$36$$35$$35$249 b$36$$35$$35$250 b$36$$35$$35$251 b$36$$35$$35$252 b$36$$35$$35$253 b$36$$35$$35$94 b$36$$35$$35$254))
(push 1)
(assert (not (apply$35$$35$13 (as totalityError Int) lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$226 b$36$$35$$35$99 b$36$$35$$35$228 b$36$$35$$35$229 b$36$$35$$35$230 b$36$$35$$35$231 b$36$$35$$35$136 b$36$$35$$35$232 b$36$$35$$35$41 b$36$$35$$35$138 b$36$$35$$35$44 b$36$$35$$35$368 b$36$$35$$35$49 b$36$$35$$35$50 b$36$$35$$35$52 b$36$$35$$35$54 b$36$$35$$35$55 b$36$$35$$35$56 b$36$$35$$35$216 b$36$$35$$35$219 b$36$$35$$35$94 b$36$$35$$35$222 b$36$$35$$35$223))
(push 1)
(assert (not (apply$35$$35$13 (as totalityError Int) lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$161 b$36$$35$$35$99 b$36$$35$$35$164 b$36$$35$$35$166 b$36$$35$$35$167 b$36$$35$$35$136 b$36$$35$$35$41 b$36$$35$$35$138 b$36$$35$$35$170 b$36$$35$$35$44 b$36$$35$$35$172 b$36$$35$$35$173 b$36$$35$$35$49 b$36$$35$$35$177 b$36$$35$$35$369 b$36$$35$$35$50 b$36$$35$$35$179 b$36$$35$$35$52 b$36$$35$$35$180 b$36$$35$$35$181 b$36$$35$$35$54 b$36$$35$$35$182 b$36$$35$$35$55 b$36$$35$$35$183 b$36$$35$$35$56 b$36$$35$$35$94))
(push 1)
(assert (not (apply$35$$35$13 (as totalityError Int) lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$161 b$36$$35$$35$99 b$36$$35$$35$164 b$36$$35$$35$166 b$36$$35$$35$167 b$36$$35$$35$136 b$36$$35$$35$41 b$36$$35$$35$138 b$36$$35$$35$170 b$36$$35$$35$44 b$36$$35$$35$172 b$36$$35$$35$173 b$36$$35$$35$174 b$36$$35$$35$175 b$36$$35$$35$176 b$36$$35$$35$49 b$36$$35$$35$50 b$36$$35$$35$370 b$36$$35$$35$52 b$36$$35$$35$54 b$36$$35$$35$55 b$36$$35$$35$56 b$36$$35$$35$94))
(push 1)
(assert (not (apply$35$$35$13 (as totalityError Int) lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(pop 1)
(pop 1)
(exit)
