(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-datatypes ((Data.N 0)) ((par () (Data.Z (Data.S (lqdc$35$$35$$36$select$35$$35$Data.S$35$$35$1 Data.N))))))
(declare-datatypes ((Data.NL 0)) ((par () (Data.Nil (Data.Cons (lqdc$35$$35$$36$select$35$$35$Data.Cons$35$$35$2 Data.N) (lqdc$35$$35$$36$select$35$$35$Data.Cons$35$$35$1 Data.NL))))))
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun ds_d2uT () Data.N)
(declare-fun x_Tuple22 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun Data.countNL () Int)
(declare-fun papp6 () Int)
(declare-fun Data.takeNL () Int)
(declare-fun lit$36$NL () Str)
(declare-fun GHC.List.iterate () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1299 () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun lq_tmp$36$x$35$$35$913 () Data.N)
(declare-fun GHC.Show.showParen () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lq_anf$36$$35$$35$7205759403792803320$35$$35$d2wM () Data.NL)
(declare-fun lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive () Str)
(declare-fun GHC.Show.$36$dmshow () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803322$35$$35$d2wO () Data.NL)
(declare-fun fst () Int)
(declare-fun GHC.Show.showString () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun snd () Int)
(declare-fun fix$36$$36$cshow$35$$35$a1B7 () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun lq_tmp$36$x$35$$35$1689 () Data.NL)
(declare-fun GHC.List.break () Int)
(declare-fun Data.addN () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun ds_d2uE () Data.N)
(declare-fun GHC.List.tail () Int)
(declare-fun Control.Exception.Base.patError () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun lit$36$N () Str)
(declare-fun GHC.Classes.$36$dm$47$$61$ () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun GHC.Show.$36$dmshowList () Int)
(declare-fun l$35$$35$a1xw () Data.NL)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun Data.Foldable.null () Int)
(declare-fun Data.concatNL () Int)
(declare-fun papp1 () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun papp4 () Int)
(declare-fun fix$36$$36$c$61$$61$$35$$35$a1zP () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun Data.$36$fShowNL () Int)
(declare-fun Data.dropNL () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803315$35$$35$d2wH () Data.NL)
(declare-fun lq_tmp$36$x$35$$35$1313 () Int)
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun lit$36$Z () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792803327$35$$35$d2wT () Data.NL)
(declare-fun n$35$$35$a1xA () Data.N)
(declare-fun lq_anf$36$$35$$35$7205759403792803323$35$$35$d2wP () Str)
(declare-fun VV$35$$35$F$35$$35$13 () Str)
(declare-fun GHC.Base.id () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun addrLen () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun fix$36$$36$c$47$$61$$35$$35$a1A0 () Int)
(declare-fun is$36$GHC.Types.C$35$ () Int)
(declare-fun lit$36$$39$Nil () Str)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803324$35$$35$d2wQ () Data.NL)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803326$35$$35$d2wS () Data.N)
(declare-fun l$35$$35$a1xu () Data.NL)
(declare-fun GHC.Classes.C$58$Eq () Int)
(declare-fun h$35$$35$a1xv () Data.N)
(declare-fun lit$36$lh$45$tactics$45$test$45$0.1.0.0$45$GcNvOh9hmbmCdIYseQTY91 () Str)
(declare-fun totalityError () Int)
(declare-fun ds_d2vf () Data.N)
(declare-fun GHC.List.cycle () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun papp2 () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803321$35$$35$d2wN () Data.N)
(declare-fun l$35$$35$a1xD () Data.NL)
(declare-fun GHC.Show.showSpace () Int)
(declare-fun tail () Int)
(declare-fun fix$36$$36$cshowList$35$$35$a1Bd () Int)
(declare-fun charX () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun GHC.Types.krep$36$$42$ () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1469 () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun lit$36$src$47$Data.hs$58$$40$37$44$1$41$$45$$40$39$44$36$41$$124$function$32$dropNL () Str)
(declare-fun GHC.List.zip () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun GHC.CString.unpackCString$35$ () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803319$35$$35$d2wL () Data.NL)
(declare-fun GHC.Types.False () Bool)
(declare-fun isJust () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun GHC.List.span () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun n$35$$35$a1xl () Data.N)
(declare-fun lq_anf$36$$35$$35$7205759403792803313$35$$35$d2wF () Data.NL)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun len () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun GHC.List.last () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun fix$36$$36$cshowsPrec$35$$35$a1AV () Int)
(declare-fun h$35$$35$a1xt () Data.N)
(declare-fun fix$36$$36$c$61$$61$$35$$35$a1AG () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun h$35$$35$a1xy () Data.N)
(declare-fun GHC.Classes.not () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun lit$36$Nil () Str)
(declare-fun GHC.Num.negate () Int)
(declare-fun papp7 () Int)
(declare-fun l$35$$35$a1xz () Data.NL)
(declare-fun n$35$$35$a1xx () Data.N)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun ds_d2uU () Data.NL)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.Show.showsPrec () Int)
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun h$35$$35$a1xC () Data.N)
(declare-fun lit$36$$39$Cons () Str)
(declare-fun lq_tmp$36$x$35$$35$1216 () Data.NL)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803325$35$$35$d2wR () Str)
(declare-fun lit$36$$39$Z () Str)
(declare-fun ds_d2v8 () Data.NL)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.C$35$$35$$35$1 () Int)
(declare-fun head () Int)
(declare-fun m$35$$35$a1xm () Data.N)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun cast_as () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun lit$36$Data () Str)
(declare-fun VV$35$$35$F$35$$35$12 () Str)
(declare-fun lq_tmp$36$x$35$$35$965 () Data.NL)
(declare-fun ds_d2uF () Data.NL)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun ds_d2uy () Data.NL)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun lq_tmp$36$x$35$$35$1073 () Data.NL)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun Data.$36$fEqNL () Int)
(declare-fun fix$36$$36$c$47$$61$$35$$35$a1AN () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun lit$36$src$47$Data.hs$58$$40$31$44$1$41$$45$$40$33$44$45$41$$124$function$32$takeNL () Str)
(declare-fun GHC.List.drop () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun papp5 () Int)
(declare-fun GHC.Classes.$36$fOrdInt () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803318$35$$35$d2wK () Data.N)
(declare-fun lit$36$Cons$32$ () Str)
(declare-fun x_Tuple21 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803314$35$$35$d2wG () Data.N)
(declare-fun GHC.List.init () Int)
(declare-fun l1$35$$35$a1xq () Data.NL)
(declare-fun lit$36$$39$S () Str)
(declare-fun Data.Tuple.fst () Int)
(declare-fun l2$35$$35$a1xo () Data.NL)
(declare-fun GHC.Real.quot () Int)
(declare-fun lq_tmp$36$x$35$$35$1483 () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun Data.$36$fShowN () Int)
(declare-fun fix$36$$36$cshowList$35$$35$a1Ay () Int)
(declare-fun fix$36$$36$cshow$35$$35$a1As () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun Data.$36$fEqN () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun GHC.List.head () Int)
(declare-fun fromJust () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun lit$36$S$32$ () Str)
(declare-fun GHC.Classes.compare () Int)
(declare-fun VV$35$$35$F$35$$35$14 () Str)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun h$35$$35$a1xp () Data.N)
(declare-fun autolen () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792803316$35$$35$d2wI () Str)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun n$35$$35$a1xs () Data.N)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun GHC.Show.C$58$Show () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.List.take () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun fix$36$$36$cshowsPrec$35$$35$a1A8 () Int)
(declare-fun papp3 () Int)
(declare-fun apply$35$$35$17 (Int Str) Data.NL)
(declare-fun apply$35$$35$32 (Int Data.NL) Str)
(declare-fun apply$35$$35$19 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$34 (Int Data.NL) Data.N)
(declare-fun apply$35$$35$10 (Int Bool) Data.N)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$28 (Int Data.N) Data.N)
(declare-fun apply$35$$35$21 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$31 (Int Data.NL) Bool)
(declare-fun apply$35$$35$20 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$13 (Int Str) Bool)
(declare-fun apply$35$$35$6 (Int Bool) Int)
(declare-fun apply$35$$35$16 (Int Str) Data.N)
(declare-fun apply$35$$35$24 (Int Data.N) Int)
(declare-fun apply$35$$35$14 (Int Str) Str)
(declare-fun apply$35$$35$15 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$23 (Int (_ BitVec 32)) Data.NL)
(declare-fun apply$35$$35$29 (Int Data.N) Data.NL)
(declare-fun apply$35$$35$18 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$12 (Int Str) Int)
(declare-fun apply$35$$35$26 (Int Data.N) Str)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$35 (Int Data.NL) Data.NL)
(declare-fun apply$35$$35$8 (Int Bool) Str)
(declare-fun apply$35$$35$9 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$5 (Int Int) Data.NL)
(declare-fun apply$35$$35$30 (Int Data.NL) Int)
(declare-fun apply$35$$35$25 (Int Data.N) Bool)
(declare-fun apply$35$$35$27 (Int Data.N) (_ BitVec 32))
(declare-fun apply$35$$35$22 (Int (_ BitVec 32)) Data.N)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$7 (Int Bool) Bool)
(declare-fun apply$35$$35$4 (Int Int) Data.N)
(declare-fun apply$35$$35$11 (Int Bool) Data.NL)
(declare-fun apply$35$$35$33 (Int Data.NL) (_ BitVec 32))
(declare-fun coerce$35$$35$17 (Str) Data.NL)
(declare-fun coerce$35$$35$32 (Data.NL) Str)
(declare-fun coerce$35$$35$19 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$34 (Data.NL) Data.N)
(declare-fun coerce$35$$35$10 (Bool) Data.N)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$28 (Data.N) Data.N)
(declare-fun coerce$35$$35$21 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$31 (Data.NL) Bool)
(declare-fun coerce$35$$35$20 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$13 (Str) Bool)
(declare-fun coerce$35$$35$6 (Bool) Int)
(declare-fun coerce$35$$35$16 (Str) Data.N)
(declare-fun coerce$35$$35$24 (Data.N) Int)
(declare-fun coerce$35$$35$14 (Str) Str)
(declare-fun coerce$35$$35$15 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$23 ((_ BitVec 32)) Data.NL)
(declare-fun coerce$35$$35$29 (Data.N) Data.NL)
(declare-fun coerce$35$$35$18 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$12 (Str) Int)
(declare-fun coerce$35$$35$26 (Data.N) Str)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$35 (Data.NL) Data.NL)
(declare-fun coerce$35$$35$8 (Bool) Str)
(declare-fun coerce$35$$35$9 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$5 (Int) Data.NL)
(declare-fun coerce$35$$35$30 (Data.NL) Int)
(declare-fun coerce$35$$35$25 (Data.N) Bool)
(declare-fun coerce$35$$35$27 (Data.N) (_ BitVec 32))
(declare-fun coerce$35$$35$22 ((_ BitVec 32)) Data.N)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$7 (Bool) Bool)
(declare-fun coerce$35$$35$4 (Int) Data.N)
(declare-fun coerce$35$$35$11 (Bool) Data.NL)
(declare-fun coerce$35$$35$33 (Data.NL) (_ BitVec 32))
(declare-fun smt_lambda$35$$35$17 (Str Data.NL) Int)
(declare-fun smt_lambda$35$$35$32 (Data.NL Str) Int)
(declare-fun smt_lambda$35$$35$19 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$34 (Data.NL Data.N) Int)
(declare-fun smt_lambda$35$$35$10 (Bool Data.N) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$28 (Data.N Data.N) Int)
(declare-fun smt_lambda$35$$35$21 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$31 (Data.NL Bool) Int)
(declare-fun smt_lambda$35$$35$20 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$13 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$16 (Str Data.N) Int)
(declare-fun smt_lambda$35$$35$24 (Data.N Int) Int)
(declare-fun smt_lambda$35$$35$14 (Str Str) Int)
(declare-fun smt_lambda$35$$35$15 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$23 ((_ BitVec 32) Data.NL) Int)
(declare-fun smt_lambda$35$$35$29 (Data.N Data.NL) Int)
(declare-fun smt_lambda$35$$35$18 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$12 (Str Int) Int)
(declare-fun smt_lambda$35$$35$26 (Data.N Str) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$35 (Data.NL Data.NL) Int)
(declare-fun smt_lambda$35$$35$8 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$9 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$5 (Int Data.NL) Int)
(declare-fun smt_lambda$35$$35$30 (Data.NL Int) Int)
(declare-fun smt_lambda$35$$35$25 (Data.N Bool) Int)
(declare-fun smt_lambda$35$$35$27 (Data.N (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$22 ((_ BitVec 32) Data.N) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$4 (Int Data.N) Int)
(declare-fun smt_lambda$35$$35$11 (Bool Data.NL) Int)
(declare-fun smt_lambda$35$$35$33 (Data.NL (_ BitVec 32)) Int)
(declare-fun lam_arg$35$$35$1$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$6 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$24 () Data.N)
(declare-fun lam_arg$35$$35$2$35$$35$24 () Data.N)
(declare-fun lam_arg$35$$35$3$35$$35$24 () Data.N)
(declare-fun lam_arg$35$$35$4$35$$35$24 () Data.N)
(declare-fun lam_arg$35$$35$5$35$$35$24 () Data.N)
(declare-fun lam_arg$35$$35$6$35$$35$24 () Data.N)
(declare-fun lam_arg$35$$35$7$35$$35$24 () Data.N)
(declare-fun lam_arg$35$$35$1$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$18 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$12 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$30 () Data.NL)
(declare-fun lam_arg$35$$35$2$35$$35$30 () Data.NL)
(declare-fun lam_arg$35$$35$3$35$$35$30 () Data.NL)
(declare-fun lam_arg$35$$35$4$35$$35$30 () Data.NL)
(declare-fun lam_arg$35$$35$5$35$$35$30 () Data.NL)
(declare-fun lam_arg$35$$35$6$35$$35$30 () Data.NL)
(declare-fun lam_arg$35$$35$7$35$$35$30 () Data.NL)
(assert (distinct lit$36$S$32$ lit$36$$39$S lit$36$Cons$32$ lit$36$src$47$Data.hs$58$$40$31$44$1$41$$45$$40$33$44$45$41$$124$function$32$takeNL lit$36$Data lit$36$$39$Z lit$36$$39$Cons lit$36$Nil lit$36$src$47$Data.hs$58$$40$37$44$1$41$$45$$40$39$44$36$41$$124$function$32$dropNL lit$36$lh$45$tactics$45$test$45$0.1.0.0$45$GcNvOh9hmbmCdIYseQTY91 lit$36$$39$Nil lit$36$Z lit$36$N lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive lit$36$NL))




(assert (distinct GHC.Types.False GHC.Types.True))


(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))


(assert (= (strLen lit$36$NL) 2))
(assert (= (strLen lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive) 36))
(assert (= (strLen lit$36$N) 1))
(assert (= (strLen lit$36$Z) 1))
(assert (= (strLen lit$36$$39$Nil) 4))
(assert (= (strLen lit$36$lh$45$tactics$45$test$45$0.1.0.0$45$GcNvOh9hmbmCdIYseQTY91) 46))
(assert (= (strLen lit$36$src$47$Data.hs$58$$40$37$44$1$41$$45$$40$39$44$36$41$$124$function$32$dropNL) 42))
(assert (= (strLen lit$36$Nil) 3))
(assert (= (strLen lit$36$$39$Cons) 5))
(assert (= (strLen lit$36$$39$Z) 2))
(assert (= (strLen lit$36$Data) 4))
(assert (= (strLen lit$36$src$47$Data.hs$58$$40$31$44$1$41$$45$$40$33$44$45$41$$124$function$32$takeNL) 42))
(assert (= (strLen lit$36$Cons$32$) 5))
(assert (= (strLen lit$36$$39$S) 2))
(assert (= (strLen lit$36$S$32$) 2))
(push 1)
(define-fun b$36$$35$$35$96 () Bool GHC.Types.True)
(define-fun b$36$$35$$35$195 () Bool (= lq_anf$36$$35$$35$7205759403792803320$35$$35$d2wM ds_d2uF))
(define-fun b$36$$35$$35$134 () Bool (and (is-Data.Z Data.Z) (not (is-Data.S Data.Z)) (= Data.Z Data.Z)))
(define-fun b$36$$35$$35$198 () Bool (= lq_anf$36$$35$$35$7205759403792803320$35$$35$d2wM ds_d2uF))
(define-fun b$36$$35$$35$39 () Bool (= GHC.Types.True GHC.Types.True))
(define-fun b$36$$35$$35$136 () Bool (and (is-Data.Nil Data.Nil) (not (is-Data.Cons Data.Nil)) (= Data.Nil Data.Nil)))
(define-fun b$36$$35$$35$201 () Bool (and (is-Data.Cons lq_anf$36$$35$$35$7205759403792803320$35$$35$d2wM) (not (is-Data.Nil lq_anf$36$$35$$35$7205759403792803320$35$$35$d2wM)) (= lq_anf$36$$35$$35$7205759403792803320$35$$35$d2wM ds_d2uF) (= lq_anf$36$$35$$35$7205759403792803320$35$$35$d2wM (Data.Cons lq_anf$36$$35$$35$7205759403792803326$35$$35$d2wS lq_anf$36$$35$$35$7205759403792803327$35$$35$d2wT)) (= (lqdc$35$$35$$36$select$35$$35$Data.Cons$35$$35$1 lq_anf$36$$35$$35$7205759403792803320$35$$35$d2wM) lq_anf$36$$35$$35$7205759403792803327$35$$35$d2wT) (= (lqdc$35$$35$$36$select$35$$35$Data.Cons$35$$35$2 lq_anf$36$$35$$35$7205759403792803320$35$$35$d2wM) lq_anf$36$$35$$35$7205759403792803326$35$$35$d2wS)))
(define-fun b$36$$35$$35$42 () Bool (= Data.$36$fShowNL Data.$36$fShowNL))
(define-fun b$36$$35$$35$170 () Bool (= lq_anf$36$$35$$35$7205759403792803313$35$$35$d2wF ds_d2uU))
(define-fun b$36$$35$$35$202 () Bool (= lq_anf$36$$35$$35$7205759403792803321$35$$35$d2wN ds_d2uE))
(define-fun b$36$$35$$35$203 () Bool (= lq_anf$36$$35$$35$7205759403792803321$35$$35$d2wN ds_d2uE))
(define-fun b$36$$35$$35$204 () Bool (and (is-Data.Z lq_anf$36$$35$$35$7205759403792803321$35$$35$d2wN) (not (is-Data.S lq_anf$36$$35$$35$7205759403792803321$35$$35$d2wN)) (= lq_anf$36$$35$$35$7205759403792803321$35$$35$d2wN Data.Z) (= lq_anf$36$$35$$35$7205759403792803321$35$$35$d2wN ds_d2uE)))
(define-fun b$36$$35$$35$173 () Bool (= lq_anf$36$$35$$35$7205759403792803313$35$$35$d2wF ds_d2uU))
(define-fun b$36$$35$$35$205 () Bool (= lq_anf$36$$35$$35$7205759403792803322$35$$35$d2wO ds_d2uF))
(define-fun b$36$$35$$35$206 () Bool (= lq_anf$36$$35$$35$7205759403792803322$35$$35$d2wO ds_d2uF))
(define-fun b$36$$35$$35$47 () Bool (= Data.Nil Data.Nil))
(define-fun b$36$$35$$35$207 () Bool (and (is-Data.Nil lq_anf$36$$35$$35$7205759403792803322$35$$35$d2wO) (not (is-Data.Cons lq_anf$36$$35$$35$7205759403792803322$35$$35$d2wO)) (= lq_anf$36$$35$$35$7205759403792803322$35$$35$d2wO Data.Nil) (= lq_anf$36$$35$$35$7205759403792803322$35$$35$d2wO ds_d2uF)))
(define-fun b$36$$35$$35$48 () Bool (= GHC.Types.False GHC.Types.False))
(define-fun b$36$$35$$35$176 () Bool (and (is-Data.Cons lq_anf$36$$35$$35$7205759403792803313$35$$35$d2wF) (not (is-Data.Nil lq_anf$36$$35$$35$7205759403792803313$35$$35$d2wF)) (= lq_anf$36$$35$$35$7205759403792803313$35$$35$d2wF ds_d2uU) (= lq_anf$36$$35$$35$7205759403792803313$35$$35$d2wF (Data.Cons lq_anf$36$$35$$35$7205759403792803318$35$$35$d2wK lq_anf$36$$35$$35$7205759403792803319$35$$35$d2wL)) (= (lqdc$35$$35$$36$select$35$$35$Data.Cons$35$$35$1 lq_anf$36$$35$$35$7205759403792803313$35$$35$d2wF) lq_anf$36$$35$$35$7205759403792803319$35$$35$d2wL) (= (lqdc$35$$35$$36$select$35$$35$Data.Cons$35$$35$2 lq_anf$36$$35$$35$7205759403792803313$35$$35$d2wF) lq_anf$36$$35$$35$7205759403792803318$35$$35$d2wK)))
(define-fun b$36$$35$$35$208 () Bool (= lq_anf$36$$35$$35$7205759403792803323$35$$35$d2wP lit$36$src$47$Data.hs$58$$40$37$44$1$41$$45$$40$39$44$36$41$$124$function$32$dropNL))
(define-fun b$36$$35$$35$177 () Bool (= lq_anf$36$$35$$35$7205759403792803314$35$$35$d2wG ds_d2uT))
(define-fun b$36$$35$$35$50 () Bool (= Data.$36$fEqNL Data.$36$fEqNL))
(define-fun b$36$$35$$35$52 () Bool (= Data.Z Data.Z))
(define-fun b$36$$35$$35$180 () Bool (= lq_anf$36$$35$$35$7205759403792803314$35$$35$d2wG ds_d2uT))
(define-fun b$36$$35$$35$53 () Bool (= Data.$36$fShowN Data.$36$fShowN))
(define-fun b$36$$35$$35$213 () Bool (= lq_anf$36$$35$$35$7205759403792803321$35$$35$d2wN ds_d2uE))
(define-fun b$36$$35$$35$54 () Bool (= Data.$36$fEqN Data.$36$fEqN))
(define-fun b$36$$35$$35$182 () Bool (and (is-Data.S lq_anf$36$$35$$35$7205759403792803314$35$$35$d2wG) (not (is-Data.Z lq_anf$36$$35$$35$7205759403792803314$35$$35$d2wG)) (= lq_anf$36$$35$$35$7205759403792803314$35$$35$d2wG ds_d2uT) (= lq_anf$36$$35$$35$7205759403792803314$35$$35$d2wG (Data.S n$35$$35$a1xs)) (= (lqdc$35$$35$$36$select$35$$35$Data.S$35$$35$1 lq_anf$36$$35$$35$7205759403792803314$35$$35$d2wG) n$35$$35$a1xs)))
(define-fun b$36$$35$$35$183 () Bool (= lq_anf$36$$35$$35$7205759403792803315$35$$35$d2wH ds_d2uU))
(define-fun b$36$$35$$35$215 () Bool (and (is-Data.S lq_anf$36$$35$$35$7205759403792803321$35$$35$d2wN) (not (is-Data.Z lq_anf$36$$35$$35$7205759403792803321$35$$35$d2wN)) (= lq_anf$36$$35$$35$7205759403792803321$35$$35$d2wN ds_d2uE) (= lq_anf$36$$35$$35$7205759403792803321$35$$35$d2wN (Data.S n$35$$35$a1xx)) (= (lqdc$35$$35$$36$select$35$$35$Data.S$35$$35$1 lq_anf$36$$35$$35$7205759403792803321$35$$35$d2wN) n$35$$35$a1xx)))
(define-fun b$36$$35$$35$184 () Bool (= lq_anf$36$$35$$35$7205759403792803315$35$$35$d2wH ds_d2uU))
(define-fun b$36$$35$$35$216 () Bool (= lq_anf$36$$35$$35$7205759403792803324$35$$35$d2wQ ds_d2uF))
(define-fun b$36$$35$$35$185 () Bool (and (is-Data.Nil lq_anf$36$$35$$35$7205759403792803315$35$$35$d2wH) (not (is-Data.Cons lq_anf$36$$35$$35$7205759403792803315$35$$35$d2wH)) (= lq_anf$36$$35$$35$7205759403792803315$35$$35$d2wH Data.Nil) (= lq_anf$36$$35$$35$7205759403792803315$35$$35$d2wH ds_d2uU)))
(define-fun b$36$$35$$35$217 () Bool (= lq_anf$36$$35$$35$7205759403792803324$35$$35$d2wQ ds_d2uF))
(define-fun b$36$$35$$35$186 () Bool (= lq_anf$36$$35$$35$7205759403792803316$35$$35$d2wI lit$36$src$47$Data.hs$58$$40$31$44$1$41$$45$$40$33$44$45$41$$124$function$32$takeNL))
(define-fun b$36$$35$$35$218 () Bool (and (is-Data.Nil lq_anf$36$$35$$35$7205759403792803324$35$$35$d2wQ) (not (is-Data.Cons lq_anf$36$$35$$35$7205759403792803324$35$$35$d2wQ)) (= lq_anf$36$$35$$35$7205759403792803324$35$$35$d2wQ Data.Nil) (= lq_anf$36$$35$$35$7205759403792803324$35$$35$d2wQ ds_d2uF)))
(define-fun b$36$$35$$35$314 () Bool (and (= VV$35$$35$F$35$$35$12 lit$36$src$47$Data.hs$58$$40$37$44$1$41$$45$$40$39$44$36$41$$124$function$32$dropNL) (= VV$35$$35$F$35$$35$12 lq_anf$36$$35$$35$7205759403792803325$35$$35$d2wR)))
(define-fun b$36$$35$$35$219 () Bool (= lq_anf$36$$35$$35$7205759403792803325$35$$35$d2wR lit$36$src$47$Data.hs$58$$40$37$44$1$41$$45$$40$39$44$36$41$$124$function$32$dropNL))
(define-fun b$36$$35$$35$315 () Bool (and (= VV$35$$35$F$35$$35$13 lit$36$src$47$Data.hs$58$$40$37$44$1$41$$45$$40$39$44$36$41$$124$function$32$dropNL) (= VV$35$$35$F$35$$35$13 lq_anf$36$$35$$35$7205759403792803323$35$$35$d2wP)))
(define-fun b$36$$35$$35$92 () Bool (not GHC.Types.False))
(define-fun b$36$$35$$35$316 () Bool (and (= VV$35$$35$F$35$$35$14 lit$36$src$47$Data.hs$58$$40$31$44$1$41$$45$$40$33$44$45$41$$124$function$32$takeNL) (= VV$35$$35$F$35$$35$14 lq_anf$36$$35$$35$7205759403792803316$35$$35$d2wI)))
(push 1)
(push 1)
(assert (and true b$36$$35$$35$96 b$36$$35$$35$195 b$36$$35$$35$134 b$36$$35$$35$198 b$36$$35$$35$39 b$36$$35$$35$136 b$36$$35$$35$201 b$36$$35$$35$42 b$36$$35$$35$202 b$36$$35$$35$47 b$36$$35$$35$48 b$36$$35$$35$50 b$36$$35$$35$52 b$36$$35$$35$53 b$36$$35$$35$213 b$36$$35$$35$54 b$36$$35$$35$215 b$36$$35$$35$216 b$36$$35$$35$217 b$36$$35$$35$218 b$36$$35$$35$314 b$36$$35$$35$219 b$36$$35$$35$92))
(push 1)
(assert (not (apply$35$$35$13 (as totalityError Int) lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$96 b$36$$35$$35$195 b$36$$35$$35$134 b$36$$35$$35$198 b$36$$35$$35$39 b$36$$35$$35$136 b$36$$35$$35$201 b$36$$35$$35$42 b$36$$35$$35$202 b$36$$35$$35$203 b$36$$35$$35$204 b$36$$35$$35$205 b$36$$35$$35$206 b$36$$35$$35$47 b$36$$35$$35$207 b$36$$35$$35$48 b$36$$35$$35$208 b$36$$35$$35$50 b$36$$35$$35$52 b$36$$35$$35$53 b$36$$35$$35$54 b$36$$35$$35$315 b$36$$35$$35$92))
(push 1)
(assert (not (apply$35$$35$13 (as totalityError Int) lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (and true b$36$$35$$35$96 b$36$$35$$35$134 b$36$$35$$35$39 b$36$$35$$35$136 b$36$$35$$35$42 b$36$$35$$35$170 b$36$$35$$35$173 b$36$$35$$35$47 b$36$$35$$35$48 b$36$$35$$35$176 b$36$$35$$35$177 b$36$$35$$35$50 b$36$$35$$35$52 b$36$$35$$35$180 b$36$$35$$35$53 b$36$$35$$35$54 b$36$$35$$35$182 b$36$$35$$35$183 b$36$$35$$35$184 b$36$$35$$35$185 b$36$$35$$35$186 b$36$$35$$35$92 b$36$$35$$35$316))
(push 1)
(assert (not (apply$35$$35$13 (as totalityError Int) lit$36$Pattern$32$match$40$es$41$$32$are$32$non$45$exhaustive)))
(check-sat)
(pop 1)
; SMT Says: Unsat
(pop 1)
(pop 1)
(pop 1)
(exit)
