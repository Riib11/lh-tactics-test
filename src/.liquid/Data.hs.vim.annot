1:1-1:1::Data.$trModule :: "GHC.Types.Module"
9:1-9:6::Data.check :: "x1:{b : GHC.Types.Bool | b} -> {VV : () | x1}"
9:7-9:8::b :: "{b : GHC.Types.Bool | b}"
14:1-14:8::Data.implies :: "x1:GHC.Types.Bool -> x2:GHC.Types.Bool -> {VV : GHC.Types.Bool | VV == implies x1 x2\n                                                                 && VV == (if x1 then x2 else true)}"
14:9-14:10::p :: "GHC.Types.Bool"
14:11-14:12::q :: "GHC.Types.Bool"
14:18-14:19::_ :: "{v : GHC.Types.Bool | v == p}"
14:25-14:26::q :: "{v : GHC.Types.Bool | v == q}"
14:32-14:36::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
20:1-20:6::Data.posit :: "x1:GHC.Types.Bool -> {VV : () | x1}"
20:7-20:8::b :: "GHC.Types.Bool"
26:1-26:9::Data.constant :: "forall a b .\nx1:a -> x2:b -> {VV : a | VV == x1\n                          && VV == constant x1 x2}"
26:10-26:11::a :: "a"
38:1-38:9::Data.n_to_int :: "Data.N -> {v : GHC.Types.Int | 0 <= v}"
38:14-38:15::lq_anf$##7205759403792805312 :: "{v : GHC.Prim.Int# | v == 0}"
39:18-39:19::lq_anf$##7205759403792805314 :: "GHC.Types.Int"
39:22-39:32::lq_anf$##7205759403792805315 :: "{v : GHC.Types.Int | v == n_to_int n\n                     && 0 <= v}"
39:31-39:32::n :: "{v : Data.N | v == n}"
43:1-43:5::Data.addN :: "x1:Data.N -> x2:Data.N -> {VV : Data.N | VV == addN x1 x2}"
43:8-43:9::n :: "Data.N"
43:12-43:13::n :: "{v : Data.N | v == n}"
44:16-44:28::Data.S :: "x1:Data.N -> {v : Data.N | v == S x1\n                           && lqdc##$select v == x1}"
44:18-44:28::lq_anf$##7205759403792805079 :: "{v : Data.N | v == addN m n}"
44:24-44:25::m :: "{v : Data.N | v == m}"
44:26-44:27::n :: "{v : Data.N | v == n}"
48:1-48:5::Data.subN :: "x1:Data.N -> x2:Data.N -> {VV : Data.N | VV == subN x1 x2}"
48:8-48:9::n :: "Data.N"
48:12-48:13::Data.Z :: "{v : Data.N | v == Z}"
49:12-49:13::ds_d2XN :: "Data.N"
50:20-50:28::Data.subN :: "x1:Data.N -> x2:Data.N -> {VV : Data.N | VV == subN x1 x2}"
50:25-50:26::m :: "{v : Data.N | v == m}"
50:27-50:28::n :: "{v : Data.N | v == n}"
54:1-54:5::Data.leqN :: "x1:Data.N -> x2:Data.N -> {VV : GHC.Types.Bool | VV == leqN x1 x2}"
54:8-54:9::n :: "Data.N"
54:12-54:16::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
55:16-55:21::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
56:20-56:28::Data.leqN :: "x1:Data.N -> x2:Data.N -> {VV : GHC.Types.Bool | VV == leqN x1 x2}"
56:25-56:26::m :: "{v : Data.N | v == m}"
56:27-56:28::n :: "{v : Data.N | v == n}"
60:1-60:4::Data.leN :: "x1:Data.N -> x2:Data.N -> {VV : GHC.Types.Bool | VV == leN x1 x2}"
60:11-60:16::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
61:15-61:19::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
62:11-62:16::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
63:19-63:26::Data.leN :: "x1:Data.N -> x2:Data.N -> {VV : GHC.Types.Bool | VV == leN x1 x2}"
63:23-63:24::m :: "{v : Data.N | v == m}"
63:25-63:26::n :: "{v : Data.N | v == n}"
67:1-67:5::Data.maxN :: "x1:Data.N -> x2:Data.N -> {VV : Data.N | VV == maxN x1 x2}"
67:8-67:9::n :: "Data.N"
67:12-67:13::n :: "{v : Data.N | v == n}"
68:12-68:13::ds_d2WA :: "Data.N"
69:20-69:32::Data.S :: "x1:Data.N -> {v : Data.N | v == S x1\n                           && lqdc##$select v == x1}"
69:22-69:32::lq_anf$##7205759403792805116 :: "{v : Data.N | v == maxN m n}"
69:28-69:29::m :: "{v : Data.N | v == m}"
69:30-69:31::n :: "{v : Data.N | v == n}"
73:1-73:5::Data.minN :: "x1:Data.N -> x2:Data.N -> {VV : Data.N | VV == minN x1 x2}"
73:8-73:9::n :: "Data.N"
73:12-73:13::Data.Z :: "{v : Data.N | v == Z}"
74:12-74:13::Data.Z :: "{v : Data.N | v == Z}"
75:20-75:32::Data.S :: "x1:Data.N -> {v : Data.N | v == S x1\n                           && lqdc##$select v == x1}"
75:22-75:32::lq_anf$##7205759403792805129 :: "{v : Data.N | v == minN m n}"
75:28-75:29::m :: "{v : Data.N | v == m}"
75:30-75:31::n :: "{v : Data.N | v == n}"
86:1-86:12::Data.concatListN :: "x1:Data.ListN -> x2:Data.ListN -> {VV : Data.ListN | VV == concatListN x1 x2}"
86:17-86:19::l2 :: "Data.ListN"
86:22-86:24::l2 :: "{v : Data.ListN | v == l2}"
87:30-87:56::Data.Cons :: "x1:Data.N -> x2:Data.ListN -> {v : Data.ListN | v == Cons x1 x2\n                                                && lqdc##$select v == x1\n                                                && lqdc##$select v == x2}"
87:35-87:36::h :: "{v : Data.N | v == h}"
87:37-87:56::lq_anf$##7205759403792805133 :: "{v : Data.ListN | v == concatListN l1 l2}"
87:50-87:52::l1 :: "{v : Data.ListN | v == l1}"
87:53-87:55::l2 :: "{v : Data.ListN | v == l2}"
91:1-91:10::Data.takeListN :: "x1:Data.N -> x2:Data.ListN -> {VV : Data.ListN | VV == takeListN x1 x2}"
91:19-91:22::Data.Nil :: "{v : Data.ListN | v == Nil}"
92:17-92:20::Data.Nil :: "{v : Data.ListN | v == Nil}"
93:30-93:52::Data.Cons :: "x1:Data.N -> x2:Data.ListN -> {v : Data.ListN | v == Cons x1 x2\n                                                && lqdc##$select v == x1\n                                                && lqdc##$select v == x2}"
93:35-93:36::h :: "{v : Data.N | v == h}"
93:37-93:52::lq_anf$##7205759403792805138 :: "{v : Data.ListN | v == takeListN n l}"
93:48-93:49::n :: "{v : Data.N | v == n}"
93:50-93:51::l :: "{v : Data.ListN | v == l}"
97:1-97:10::Data.dropListN :: "x1:Data.N -> x2:Data.ListN -> {VV : Data.ListN | VV == dropListN x1 x2}"
97:19-97:22::Data.Nil :: "{v : Data.ListN | v == Nil}"
98:17-98:18::ds_d2VE :: "Data.ListN"
99:30-99:43::Data.dropListN :: "x1:Data.N -> x2:Data.ListN -> {VV : Data.ListN | VV == dropListN x1 x2}"
99:40-99:41::n :: "{v : Data.N | v == n}"
99:42-99:43::l :: "{v : Data.ListN | v == l}"
103:1-103:15::Data.dropWhileListN :: "x1:(Data.N -> GHC.Types.Bool) -> x3:Data.ListN -> {VV : Data.ListN | VV == dropWhileListN x1 x3}"
103:16-103:17::f :: "Data.N -> GHC.Types.Bool"
103:24-103:27::Data.Nil :: "{v : Data.ListN | v == Nil}"
105:3-105:49::lq_anf$##7205759403792805149 :: "{v : GHC.Types.Bool | v == f x}"
105:6-105:9::lq_anf$##7205759403792805148 :: "{v : GHC.Types.Bool | v == f x}"
105:8-105:9::x :: "{v : Data.N | v == x}"
105:15-105:34::Data.dropWhileListN :: "x1:(Data.N -> GHC.Types.Bool) -> x3:Data.ListN -> {VV : Data.ListN | VV == dropWhileListN x1 x3}"
105:30-105:31::f :: "Data.N -> GHC.Types.Bool"
105:32-105:34::xs :: "{v : Data.ListN | v == xs}"
105:40-105:49::Data.Cons :: "x1:Data.N -> x2:Data.ListN -> {v : Data.ListN | v == Cons x1 x2\n                                                && lqdc##$select v == x1\n                                                && lqdc##$select v == x2}"
105:45-105:46::x :: "{v : Data.N | v == x}"
105:47-105:49::xs :: "{v : Data.ListN | v == xs}"
109:1-109:15::Data.takeWhileListN :: "x1:(Data.N -> GHC.Types.Bool) -> x3:Data.ListN -> {VV : Data.ListN | VV == takeWhileListN x1 x3}"
109:16-109:17::f :: "Data.N -> GHC.Types.Bool"
109:24-109:27::Data.Nil :: "{v : Data.ListN | v == Nil}"
111:3-111:52::lq_anf$##7205759403792805152 :: "{v : GHC.Types.Bool | v == f x}"
111:6-111:9::lq_anf$##7205759403792805151 :: "{v : GHC.Types.Bool | v == f x}"
111:8-111:9::x :: "{v : Data.N | v == x}"
111:15-111:43::Data.Cons :: "x1:Data.N -> x2:Data.ListN -> {v : Data.ListN | v == Cons x1 x2\n                                                && lqdc##$select v == x1\n                                                && lqdc##$select v == x2}"
111:20-111:21::x :: "{v : Data.N | v == x}"
111:22-111:43::lq_anf$##7205759403792805153 :: "{v : Data.ListN | v == takeWhileListN f xs}"
111:38-111:39::f :: "Data.N -> GHC.Types.Bool"
111:40-111:42::xs :: "{v : Data.ListN | v == xs}"
111:49-111:52::Data.Nil :: "{v : Data.ListN | v == Nil}"
115:1-115:11::Data.countListN :: "x1:Data.N -> x2:Data.ListN -> {VV : Data.N | VV == countListN x1 x2}"
115:12-115:13::n :: "Data.N"
115:20-115:21::Data.Z :: "{v : Data.N | v == Z}"
117:3-117:56::lq_anf$##7205759403792805360 :: "{v : GHC.Types.Bool | (v <=> n == h)\n                      && v == == n h}"
117:6-117:7::n :: "{v : Data.N | v == n}"
117:11-117:12::h :: "{v : Data.N | v == h}"
117:18-117:36::Data.S :: "x1:Data.N -> {v : Data.N | v == S x1\n                           && lqdc##$select v == x1}"
117:20-117:36::lq_anf$##7205759403792805361 :: "{v : Data.N | v == countListN n l}"
117:32-117:33::n :: "{v : Data.N | v == n}"
117:34-117:35::l :: "{v : Data.ListN | v == l}"
117:42-117:56::Data.countListN :: "x1:Data.N -> x2:Data.ListN -> {VV : Data.N | VV == countListN x1 x2}"
117:53-117:54::n :: "{v : Data.N | v == n}"
117:55-117:56::l :: "{v : Data.ListN | v == l}"
121:1-121:12::Data.lengthListN :: "x1:Data.ListN -> {VV : Data.N | VV == lengthListN x1}"
121:19-121:20::Data.Z :: "{v : Data.N | v == Z}"
122:26-122:43::Data.S :: "x1:Data.N -> {v : Data.N | v == S x1\n                           && lqdc##$select v == x1}"
122:28-122:43::lq_anf$##7205759403792805155 :: "{v : Data.N | v == lengthListN t}"
122:41-122:42::t :: "{v : Data.ListN | v == t}"
127:1-127:16::Data.lengthListN_int :: "Data.ListN -> {v : GHC.Types.Int | 0 <= v}"
127:23-127:24::lq_anf$##7205759403792805307 :: "{v : GHC.Prim.Int# | v == 0}"
128:30-128:31::lq_anf$##7205759403792805309 :: "GHC.Types.Int"
128:34-128:51::lq_anf$##7205759403792805310 :: "{v : GHC.Types.Int | v == lengthListN_int t\n                     && 0 <= v}"
128:50-128:51::t :: "{v : Data.ListN | v == t}"
132:1-132:12::Data.insertListN :: "x1:Data.N -> x2:Data.ListN -> {VV : Data.ListN | VV == insertListN x1 x2}"
132:13-132:14::n :: "Data.N"
132:21-132:31::Data.Cons :: "x1:Data.N -> x2:Data.ListN -> {v : Data.ListN | v == Cons x1 x2\n                                                && lqdc##$select v == x1\n                                                && lqdc##$select v == x2}"
132:26-132:27::n :: "{v : Data.N | v == n}"
132:28-132:31::Data.Nil :: "{v : Data.ListN | v == Nil}"
134:6-134:14::lq_anf$##7205759403792805091 :: "{v : GHC.Types.Bool | v == leqN n h}"
134:11-134:12::n :: "{v : Data.N | v == n}"
134:13-134:14::h :: "{v : Data.N | v == h}"
135:10-135:27::Data.Cons :: "x1:Data.N -> x2:Data.ListN -> {v : Data.ListN | v == Cons x1 x2\n                                                && lqdc##$select v == x1\n                                                && lqdc##$select v == x2}"
135:15-135:16::n :: "{v : Data.N | v == n}"
135:17-135:27::lq_anf$##7205759403792805094 :: "{v : Data.ListN | v == Cons h t\n                  && lqdc##$select v == h\n                  && lqdc##$select v == t}"
135:23-135:24::h :: "{v : Data.N | v == h}"
135:25-135:26::t :: "{v : Data.ListN | v == t}"
136:10-136:34::Data.Cons :: "x1:Data.N -> x2:Data.ListN -> {v : Data.ListN | v == Cons x1 x2\n                                                && lqdc##$select v == x1\n                                                && lqdc##$select v == x2}"
136:15-136:16::h :: "{v : Data.N | v == h}"
136:17-136:34::lq_anf$##7205759403792805093 :: "{v : Data.ListN | v == insertListN n t}"
136:30-136:31::n :: "{v : Data.N | v == n}"
136:32-136:33::t :: "{v : Data.ListN | v == t}"
140:1-140:10::Data.sortListN :: "x1:Data.ListN -> {VV : Data.ListN | VV == sortListN x1}"
140:17-140:20::Data.Nil :: "{v : Data.ListN | v == Nil}"
141:24-141:51::Data.insertListN :: "x1:Data.N -> x2:Data.ListN -> {VV : Data.ListN | VV == insertListN x1 x2}"
141:36-141:37::h :: "{v : Data.N | v == h}"
141:38-141:51::lq_anf$##7205759403792805096 :: "{v : Data.ListN | v == sortListN t}"
141:49-141:50::t :: "{v : Data.ListN | v == t}"
145:1-145:12::Data.sortedListN :: "x1:Data.ListN -> {VV : GHC.Types.Bool | VV == sortedListN x1}"
145:19-145:23::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
146:28-146:32::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
147:44-147:54::lq_anf$##7205759403792805099 :: "{v : GHC.Types.Bool | v == leqN x v}"
147:49-147:51::x :: "{v : Data.N | v == x}"
147:52-147:54::x2 :: "Data.N"
147:58-147:73::lq_anf$##7205759403792805100 :: "GHC.Types.Bool"
147:70-147:73::ds_d2XM :: "Data.ListN"
151:1-151:10::Data.elemListN :: "x1:Data.N -> x2:Data.ListN -> {VV : GHC.Types.Bool | VV == elemListN x1 x2}"
151:11-151:12::x :: "Data.N"
151:19-151:24::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
153:6-153:7::x :: "{v : Data.N | v == x}"
153:11-153:12::y :: "{v : Data.N | v == y}"
154:10-154:14::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
155:10-155:24::Data.elemListN :: "x1:Data.N -> x2:Data.ListN -> {VV : GHC.Types.Bool | VV == elemListN x1 x2}"
155:20-155:21::x :: "{v : Data.N | v == x}"
155:22-155:24::ys :: "{v : Data.ListN | v == ys}"
159:1-159:10::Data.initListN :: "x1:Data.ListN -> {VV : Data.ListN | VV == initListN x1}"
159:17-159:20::Data.Nil :: "{v : Data.ListN | v == Nil}"
160:26-160:29::Data.Nil :: "{v : Data.ListN | v == Nil}"
161:24-161:44::Data.Cons :: "x1:Data.N -> x2:Data.ListN -> {v : Data.ListN | v == Cons x1 x2\n                                                && lqdc##$select v == x1\n                                                && lqdc##$select v == x2}"
161:29-161:30::h :: "{v : Data.N | v == h}"
161:31-161:44::lq_anf$##7205759403792805158 :: "Data.ListN"
161:42-161:43::ds_d2UY :: "Data.ListN"
165:1-165:15::Data.singletonListN :: "x1:Data.N -> {VV : Data.ListN | VV == singletonListN x1\n                                && VV == Cons x1 Nil}"
165:16-165:17::n :: "Data.N"
165:25-165:26::n :: "{v : Data.N | v == n}"
165:27-165:30::Data.Nil :: "{v : Data.ListN | v == Nil}"
169:1-169:5::Data.ins1 :: "x1:Data.N -> x2:Data.ListN -> {VV : Data.ListN | VV == ins1 x1 x2}"
169:6-169:7::n :: "Data.N"
169:14-169:30::Data.singletonListN :: "x1:Data.N -> {v : Data.ListN | v == singletonListN x1\n                               && v == Cons x1 Nil}"
169:29-169:30::n :: "{v : Data.N | v == n}"
171:6-171:7::n :: "{v : Data.N | v == n}"
171:11-171:12::x :: "{v : Data.N | v == x}"
172:10-172:19::Data.Cons :: "x1:Data.N -> x2:Data.ListN -> {v : Data.ListN | v == Cons x1 x2\n                                                && lqdc##$select v == x1\n                                                && lqdc##$select v == x2}"
172:15-172:16::x :: "{v : Data.N | v == x}"
172:17-172:19::xs :: "{v : Data.ListN | v == xs}"
173:10-173:28::Data.Cons :: "x1:Data.N -> x2:Data.ListN -> {v : Data.ListN | v == Cons x1 x2\n                                                && lqdc##$select v == x1\n                                                && lqdc##$select v == x2}"
173:15-173:16::x :: "{v : Data.N | v == x}"
173:17-173:28::lq_anf$##7205759403792805354 :: "{v : Data.ListN | v == ins1 n xs}"
173:23-173:24::n :: "{v : Data.N | v == n}"
173:25-173:27::xs :: "{v : Data.ListN | v == xs}"
177:1-177:10::Data.lastListN :: "x1:Data.N -> x2:Data.ListN -> {VV : Data.N | VV == lastListN x1 x2}"
177:11-177:12::x :: "Data.N"
177:19-177:20::x :: "{v : Data.N | v == x}"
178:26-178:39::Data.lastListN :: "x1:Data.N -> x2:Data.ListN -> {VV : Data.N | VV == lastListN x1 x2}"
178:36-178:37::h :: "{v : Data.N | v == h}"
178:38-178:39::t :: "{v : Data.ListN | v == t}"
182:1-182:11::Data.lastListN' :: "x1:Data.ListN -> {VV : Data.N | VV == lastListN' x1}"
182:18-182:19::Data.Z :: "{v : Data.N | v == Z}"
183:27-183:28::x :: "{v : Data.N | v == x}"
184:26-184:39::Data.lastListN' :: "x1:Data.ListN -> {VV : Data.N | VV == lastListN' x1}"
184:37-184:39::ds_d2Ui :: "Data.ListN"
189:1-189:10::Data.nullListN :: "x1:Data.ListN -> {VV : GHC.Types.Bool | VV == nullListN x1}"
189:17-189:21::GHC.Types.True :: "{v : GHC.Types.Bool | v\n                      && v == True}"
190:15-190:20::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
194:1-194:16::Data.initConcatListN :: "x1:Data.ListN -> x2:Data.ListN -> {VV : Data.ListN | VV == initConcatListN x1 x2}"
194:17-194:19::xs :: "Data.ListN"
194:26-194:38::Data.initListN :: "x1:Data.ListN -> {VV : Data.ListN | VV == initListN x1}"
194:36-194:38::xs :: "{v : Data.ListN | v == xs}"
195:34-195:63::Data.concatListN :: "x1:Data.ListN -> x2:Data.ListN -> {VV : Data.ListN | VV == concatListN x1 x2}"
195:46-195:48::xs :: "{v : Data.ListN | v == xs}"
195:49-195:63::lq_anf$##7205759403792805162 :: "{v : Data.ListN | v == initListN ys}"
195:60-195:62::ys :: "{v : Data.ListN | v == ys}"
199:1-199:13::Data.reverseListN :: "x1:Data.ListN -> {VV : Data.ListN | VV == reverseListN x1}"
199:20-199:23::Data.Nil :: "{v : Data.ListN | v == Nil}"
200:27-200:74::Data.concatListN :: "x1:Data.ListN -> x2:Data.ListN -> {VV : Data.ListN | VV == concatListN x1 x2}"
200:39-200:55::lq_anf$##7205759403792805164 :: "{v : Data.ListN | v == reverseListN t}"
200:53-200:54::t :: "{v : Data.ListN | v == t}"
200:56-200:74::lq_anf$##7205759403792805165 :: "{v : Data.ListN | v == singletonListN h\n                  && v == Cons h Nil}"
200:72-200:73::h :: "{v : Data.N | v == h}"
204:1-204:10::Data.lastOfTwo :: "x1:Data.ListN -> x2:Data.ListN -> {VV : Data.N | VV == lastOfTwo x1 x2}"
204:11-204:13::xs :: "Data.ListN"
204:20-204:33::Data.lastListN' :: "x1:Data.ListN -> {VV : Data.N | VV == lastListN' x1}"
204:31-204:33::xs :: "{v : Data.ListN | v == xs}"
205:19-205:32::Data.lastListN' :: "x1:Data.ListN -> {VV : Data.N | VV == lastListN' x1}"
205:30-205:32::ds_d2Un :: "Data.ListN"
209:1-209:12::Data.deleteListN :: "x1:Data.N -> x2:Data.ListN -> {VV : Data.ListN | VV == deleteListN x1 x2}"
209:13-209:14::x :: "Data.N"
209:21-209:24::Data.Nil :: "{v : Data.ListN | v == Nil}"
210:29-210:91::lq_anf$##7205759403792805322 :: "{v : GHC.Types.Bool | (v <=> x == y)\n                      && v == == x y}"
210:32-210:33::x :: "{v : Data.N | v == x}"
210:37-210:38::y :: "{v : Data.N | v == y}"
210:44-210:60::Data.deleteListN :: "x1:Data.N -> x2:Data.ListN -> {VV : Data.ListN | VV == deleteListN x1 x2}"
210:56-210:57::x :: "{v : Data.N | v == x}"
210:58-210:60::ys :: "{v : Data.ListN | v == ys}"
210:66-210:91::Data.Cons :: "x1:Data.N -> x2:Data.ListN -> {v : Data.ListN | v == Cons x1 x2\n                                                && lqdc##$select v == x1\n                                                && lqdc##$select v == x2}"
210:71-210:72::y :: "{v : Data.N | v == y}"
210:73-210:91::lq_anf$##7205759403792805323 :: "{v : Data.ListN | v == deleteListN x ys}"
210:86-210:87::x :: "{v : Data.N | v == x}"
210:88-210:90::ys :: "{v : Data.ListN | v == ys}"
219:1-219:9::Data.zipListN :: "x1:Data.ListN -> x2:Data.ListN -> {VV : Data.ListN2 | VV == zipListN x1 x2}"
219:18-219:22::Data.Nil2 :: "{v : Data.ListN2 | v == Nil2}"
220:18-220:22::Data.Nil2 :: "{v : Data.ListN2 | v == Nil2}"
221:36-221:62::Data.Cons2 :: "x1:Data.N -> x2:Data.N -> x3:Data.ListN2 -> {v : Data.ListN2 | v == Cons2 x1 x2 x3\n                                                               && lqdc##$select v == x1\n                                                               && lqdc##$select v == x2\n                                                               && lqdc##$select v == x3}"
221:42-221:43::x :: "{v : Data.N | v == x}"
221:44-221:45::y :: "{v : Data.N | v == y}"
221:46-221:62::lq_anf$##7205759403792805183 :: "{v : Data.ListN2 | v == zipListN xs ys}"
221:56-221:58::xs :: "{v : Data.ListN | v == xs}"
221:59-221:61::ys :: "{v : Data.ListN | v == ys}"
225:1-225:15::Data.zipConcatListN :: "x1:Data.N -> x2:Data.ListN -> x3:Data.ListN -> {VV : Data.ListN2 | VV == zipConcatListN x1 x2 x3}"
225:26-225:30::Data.Nil2 :: "{v : Data.ListN2 | v == Nil2}"
226:35-226:61::Data.Cons2 :: "x1:Data.N -> x2:Data.N -> x3:Data.ListN2 -> {v : Data.ListN2 | v == Cons2 x1 x2 x3\n                                                               && lqdc##$select v == x1\n                                                               && lqdc##$select v == x2\n                                                               && lqdc##$select v == x3}"
226:41-226:42::ds_d2TI :: "Data.N"
226:43-226:44::y :: "{v : Data.N | v == y}"
226:45-226:61::lq_anf$##7205759403792805189 :: "Data.ListN2"
226:55-226:57::ds_d2TJ :: "Data.ListN"
226:58-226:60::ys :: "{v : Data.ListN | v == ys}"
230:1-230:11::Data.dropListN2 :: "x1:Data.N -> x2:Data.ListN2 -> {VV : Data.ListN2 | VV == dropListN2 x1 x2}"
230:14-230:16::xs :: "Data.ListN2"
230:19-230:21::xs :: "{v : Data.ListN2 | v == xs}"
231:21-231:25::Data.Nil2 :: "{v : Data.ListN2 | v == Nil2}"
232:37-232:52::Data.dropListN2 :: "x1:Data.N -> x2:Data.ListN2 -> {VV : Data.ListN2 | VV == dropListN2 x1 x2}"
232:48-232:49::n :: "{v : Data.N | v == n}"
232:50-232:52::xs :: "{v : Data.ListN2 | v == xs}"
236:1-236:11::Data.takeListN2 :: "x1:Data.N -> x2:Data.ListN2 -> {VV : Data.ListN2 | VV == takeListN2 x1 x2}"
236:18-236:22::Data.Nil2 :: "{v : Data.ListN2 | v == Nil2}"
237:21-237:25::Data.Nil2 :: "{v : Data.ListN2 | v == Nil2}"
238:37-238:66::Data.Cons2 :: "x1:Data.N -> x2:Data.N -> x3:Data.ListN2 -> {v : Data.ListN2 | v == Cons2 x1 x2 x3\n                                                               && lqdc##$select v == x1\n                                                               && lqdc##$select v == x2\n                                                               && lqdc##$select v == x3}"
238:43-238:45::x1 :: "{v : Data.N | v == x1}"
238:46-238:48::x2 :: "Data.N"
238:49-238:66::lq_anf$##7205759403792805206 :: "{v : Data.ListN2 | v == takeListN2 n xs}"
238:61-238:62::n :: "{v : Data.N | v == n}"
238:63-238:65::xs :: "{v : Data.ListN2 | v == xs}"
242:1-242:13::Data.concatListN2 :: "x1:Data.ListN2 -> x2:Data.ListN2 -> {VV : Data.ListN2 | VV == concatListN2 x1 x2}"
242:19-242:21::ys :: "Data.ListN2"
242:24-242:26::ys :: "{v : Data.ListN2 | v == ys}"
243:36-243:68::Data.Cons2 :: "x1:Data.N -> x2:Data.N -> x3:Data.ListN2 -> {v : Data.ListN2 | v == Cons2 x1 x2 x3\n                                                               && lqdc##$select v == x1\n                                                               && lqdc##$select v == x2\n                                                               && lqdc##$select v == x3}"
243:42-243:44::x1 :: "{v : Data.N | v == x1}"
243:45-243:47::x2 :: "Data.N"
243:48-243:68::lq_anf$##7205759403792805212 :: "{v : Data.ListN2 | v == concatListN2 xs ys}"
243:62-243:64::xs :: "{v : Data.ListN2 | v == xs}"
243:65-243:67::ys :: "{v : Data.ListN2 | v == ys}"
247:1-247:16::Data.singletonListN2 :: "x1:Data.N -> x2:Data.N -> {VV : Data.ListN2 | VV == singletonListN2 x1 x2\n                                              && VV == Cons2 x1 x2 Nil2}"
247:17-247:19::x1 :: "Data.N"
247:20-247:22::x2 :: "Data.N"
247:31-247:33::x1 :: "{v : Data.N | v == x1}"
247:34-247:36::x2 :: "Data.N"
247:37-247:41::Data.Nil2 :: "{v : Data.ListN2 | v == Nil2}"
251:1-251:14::Data.reverseListN2 :: "x1:Data.ListN2 -> {VV : Data.ListN2 | VV == reverseListN2 x1}"
251:22-251:26::Data.Nil2 :: "{v : Data.ListN2 | v == Nil2}"
252:34-252:89::Data.concatListN2 :: "x1:Data.ListN2 -> x2:Data.ListN2 -> {VV : Data.ListN2 | VV == concatListN2 x1 x2}"
252:47-252:65::lq_anf$##7205759403792805214 :: "{v : Data.ListN2 | v == reverseListN2 xs}"
252:62-252:64::xs :: "{v : Data.ListN2 | v == xs}"
252:66-252:89::lq_anf$##7205759403792805215 :: "{v : Data.ListN2 | v == singletonListN2 x1 v\n                   && v == Cons2 x1 v Nil2}"
252:83-252:85::x1 :: "{v : Data.N | v == x1}"
252:86-252:88::x2 :: "Data.N"
263:1-263:12::Data.heightTreeN :: "x1:Data.TreeN -> {VV : Data.N | VV == heightTreeN x1}"
263:20-263:21::Data.Z :: "{v : Data.N | v == Z}"
264:28-264:68::Data.S :: "x1:Data.N -> {v : Data.N | v == S x1\n                           && lqdc##$select v == x1}"
264:30-264:68::lq_anf$##7205759403792805122 :: "Data.N"
264:36-264:51::lq_anf$##7205759403792805120 :: "{v : Data.N | v == heightTreeN l}"
264:49-264:50::l :: "{v : Data.TreeN | v == l}"
264:52-264:67::lq_anf$##7205759403792805121 :: "{v : Data.N | v == heightTreeN r}"
264:65-264:66::r :: "{v : Data.TreeN | v == r}"
268:1-268:12::Data.mirrorTreeN :: "x1:Data.TreeN -> {VV : Data.TreeN | VV == mirrorTreeN x1}"
268:20-268:24::Data.Leaf :: "{v : Data.TreeN | v == Leaf}"
269:28-269:66::Data.Node :: "x1:Data.N -> x2:Data.TreeN -> x3:Data.TreeN -> {v : Data.TreeN | v == Node x1 x2 x3\n                                                                 && lqdc##$select v == x1\n                                                                 && lqdc##$select v == x2\n                                                                 && lqdc##$select v == x3}"
269:33-269:34::x :: "{v : Data.N | v == x}"
269:35-269:50::lq_anf$##7205759403792805217 :: "{v : Data.TreeN | v == mirrorTreeN r}"
269:48-269:49::r :: "{v : Data.TreeN | v == r}"
269:51-269:66::lq_anf$##7205759403792805218 :: "{v : Data.TreeN | v == mirrorTreeN l}"
269:64-269:65::l :: "{v : Data.TreeN | v == l}"