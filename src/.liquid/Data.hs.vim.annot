1:1-1:1::Data.$trModule :: "GHC.Types.Module"
14:1-14:5::Data.addN :: "x1:Data.N -> x2:Data.N -> {VV : Data.N | VV == addN x1 x2}"
14:8-14:9::n :: "Data.N"
14:12-14:13::n :: "{v : Data.N | v == n}"
15:16-15:28::Data.S :: "x1:Data.N -> {v : Data.N | v == S x1\n                           && lqdc##$select v == x1}"
15:18-15:28::lq_anf$##7205759403792803310 :: "{v : Data.N | v == addN m n}"
15:24-15:25::m :: "{v : Data.N | v == m}"
15:26-15:27::n :: "{v : Data.N | v == n}"
26:1-26:9::Data.concatNL :: "x1:Data.NL -> x2:Data.NL -> {VV : Data.NL | VV == concatNL x1 x2}"
26:14-26:16::l2 :: "Data.NL"
26:19-26:21::l2 :: "{v : Data.NL | v == l2}"
27:27-27:50::Data.Cons :: "x1:Data.N -> x2:Data.NL -> {v : Data.NL | v == Cons x1 x2\n                                          && lqdc##$select v == x1\n                                          && lqdc##$select v == x2}"
27:32-27:33::h :: "{v : Data.N | v == h}"
27:34-27:50::lq_anf$##7205759403792803312 :: "{v : Data.NL | v == concatNL l1 l2}"
27:44-27:46::l1 :: "{v : Data.NL | v == l1}"
27:47-27:49::l2 :: "{v : Data.NL | v == l2}"
31:1-31:7::Data.takeNL :: "x1:Data.N -> x2:Data.NL -> {VV : Data.NL | VV == takeNL x1 x2}"
31:16-31:19::Data.Nil :: "{v : Data.NL | v == Nil}"
32:14-32:17::Data.Nil :: "{v : Data.NL | v == Nil}"
33:27-33:46::Data.Cons :: "x1:Data.N -> x2:Data.NL -> {v : Data.NL | v == Cons x1 x2\n                                          && lqdc##$select v == x1\n                                          && lqdc##$select v == x2}"
33:32-33:33::h :: "{v : Data.N | v == h}"
33:34-33:46::lq_anf$##7205759403792803317 :: "{v : Data.NL | v == takeNL n l}"
33:42-33:43::n :: "{v : Data.N | v == n}"
33:44-33:45::l :: "{v : Data.NL | v == l}"
37:1-37:7::Data.dropNL :: "x1:Data.N -> x2:Data.NL -> {VV : Data.NL | VV == dropNL x1 x2}"
37:16-37:19::Data.Nil :: "{v : Data.NL | v == Nil}"
38:23-38:31::Data.Cons :: "x1:Data.N -> x2:Data.NL -> {v : Data.NL | v == Cons x1 x2\n                                          && lqdc##$select v == x1\n                                          && lqdc##$select v == x2}"
38:28-38:29::h :: "{v : Data.N | v == h}"
38:30-38:31::l :: "{v : Data.NL | v == l}"
39:27-39:37::Data.dropNL :: "x1:Data.N -> x2:Data.NL -> {VV : Data.NL | VV == dropNL x1 x2}"
39:34-39:35::n :: "{v : Data.N | v == n}"
39:36-39:37::l :: "{v : Data.NL | v == l}"
43:1-43:8::Data.countNL :: "x1:Data.N -> x2:Data.NL -> {VV : Data.N | VV == countNL x1 x2}"
43:9-43:10::n :: "Data.N"
43:17-43:18::Data.Z :: "{v : Data.N | v == Z}"
44:24-44:71::lq_anf$##7205759403792803370 :: "{v : GHC.Types.Bool | (v <=> n == h)\n                      && v == == n h}"
44:27-44:28::n :: "{v : Data.N | v == n}"
44:32-44:33::h :: "{v : Data.N | v == h}"
44:39-44:54::Data.S :: "x1:Data.N -> {v : Data.N | v == S x1\n                           && lqdc##$select v == x1}"
44:41-44:54::lq_anf$##7205759403792803371 :: "{v : Data.N | v == countNL n l}"
44:50-44:51::n :: "{v : Data.N | v == n}"
44:52-44:53::l :: "{v : Data.NL | v == l}"
44:60-44:71::Data.countNL :: "x1:Data.N -> x2:Data.NL -> {VV : Data.N | VV == countNL x1 x2}"
44:68-44:69::n :: "{v : Data.N | v == n}"
44:70-44:71::l :: "{v : Data.NL | v == l}"