{"o_vars":null,"o_types":[[{"spanInfo":{"endCol":1,"startCol":1,"startLine":1,"filename":"src/Test1.hs","endLine":1},"realSpan":true},[["Test1.$trModule","GHC.Types.Module"]]],[{"spanInfo":{"endCol":26,"startCol":17,"startLine":25,"filename":"src/Test1.hs","endLine":25},"realSpan":true},[["lq_anf$##7205759403792817188","{v : Test1.N | v == add m n}"]]],[{"spanInfo":{"endCol":12,"startCol":11,"startLine":24,"filename":"src/Test1.hs","endLine":24},"realSpan":true},[["n","{v : Test1.N | v == n}"]]],[{"spanInfo":{"endCol":25,"startCol":24,"startLine":25,"filename":"src/Test1.hs","endLine":25},"realSpan":true},[["n","{v : Test1.N | v == n}"]]],[{"spanInfo":{"endCol":4,"startCol":1,"startLine":24,"filename":"src/Test1.hs","endLine":24},"realSpan":true},[["Test1.add","x1:Test1.N -> x2:Test1.N -> {VV : Test1.N | VV == add x1 x2}"]]],[{"spanInfo":{"endCol":3,"startCol":9,"startLine":33,"filename":"src/Test1.hs","endLine":38},"realSpan":true},[["lq_anf$##7205759403792817204","{v : GHC.Prim.Addr# | v == \"#Dec#NameBeginadd_m_Sn#NameEnd#TypeBeginN -> N -> Proof#TypeEnd#Lambda#NameBeginm#NameEnd#Lambda#NameBeginn#NameEnd#Case#ExpBeginm#ExpEnd#CaseMatch#PatBeginTest1.Z#PatEnd#AutoPreExp#TrivialPreExp#CaseMatch#PatBeginTest1.S n_0#PatEnd#AutoPreExp#AutoExp#ExpBeginadd_m_Sn n_0 n#ExpEnd#AutoExp#ExpBeginadd_m_Sn n_0 n_0#ExpEnd#AutoExp#ExpBeginadd_m_Sn n_0 (S n)#ExpEnd#AutoExp#ExpBeginadd_m_Sn n_0 (S n_0)#ExpEnd#AutoExp#ExpBeginadd_m_Sn n_0 (S Z)#ExpEnd#AutoExp#ExpBeginadd_m_Sn n_0 Z#ExpEnd#TrivialPreExp\"}"]]],[{"spanInfo":{"endCol":3,"startCol":9,"startLine":33,"filename":"src/Test1.hs","endLine":38},"realSpan":true},[["Test1.add_m_Sn","x1:Test1.N -> x2:Test1.N -> {VV : () | add x1 (S x2) == S (add x1 x2)}"]]],[{"spanInfo":{"endCol":8,"startCol":7,"startLine":24,"filename":"src/Test1.hs","endLine":24},"realSpan":true},[["n","Test1.N"]]],[{"spanInfo":{"endCol":26,"startCol":1,"startLine":24,"filename":"src/Test1.hs","endLine":25},"realSpan":true},[["lq_anf$##7205759403792817187","Test1.N"]]],[{"spanInfo":{"endCol":23,"startCol":22,"startLine":25,"filename":"src/Test1.hs","endLine":25},"realSpan":true},[["m","{v : Test1.N | v == m}"]]],[{"spanInfo":{"endCol":26,"startCol":15,"startLine":25,"filename":"src/Test1.hs","endLine":25},"realSpan":true},[["Test1.S","x1:Test1.N -> {v : Test1.N | v == S x1\n                             && lqdc##$select v == x1}"]]]],"o_templs":[[{"spanInfo":{"endCol":1,"startCol":1,"startLine":1,"filename":"src/Test1.hs","endLine":1},"realSpan":true},[["Test1.$trModule","{VV##687 : GHC.Types.Module | $k_##688}"]]],[{"spanInfo":{"endCol":26,"startCol":17,"startLine":25,"filename":"src/Test1.hs","endLine":25},"realSpan":true},[["lq_anf$##7205759403792817188","{lq_tmp$x##498 : Test1.N | lq_tmp$x##498 == Test1.add m##a676 n##a675\n                           && lq_tmp$x##498 == (if is$Test1.Z m##a676 then n##a675 else Test1.S (Test1.add (lqdc##$select##Test1.S##1 m##a676) n##a675))}"]]],[{"spanInfo":{"endCol":12,"startCol":11,"startLine":24,"filename":"src/Test1.hs","endLine":24},"realSpan":true},[["n","{lq_tmp$x##484 : Test1.N | lq_tmp$x##484 == n##a675}"]]],[{"spanInfo":{"endCol":25,"startCol":24,"startLine":25,"filename":"src/Test1.hs","endLine":25},"realSpan":true},[["n","{lq_tmp$x##504 : Test1.N | lq_tmp$x##504 == n##a675}"]]],[{"spanInfo":{"endCol":4,"startCol":1,"startLine":24,"filename":"src/Test1.hs","endLine":24},"realSpan":true},[["Test1.add","lq_tmp$x##470:Test1.N -> lq_tmp$x##471:Test1.N -> {VV : Test1.N | VV == Test1.add lq_tmp$x##470 lq_tmp$x##471\n                                                                  && VV == (if is$Test1.Z lq_tmp$x##470 then lq_tmp$x##471 else Test1.S (Test1.add (lqdc##$select##Test1.S##1 lq_tmp$x##470) lq_tmp$x##471))}"]]],[{"spanInfo":{"endCol":3,"startCol":9,"startLine":33,"filename":"src/Test1.hs","endLine":38},"realSpan":true},[["lq_anf$##7205759403792817204","{lq_tmp$x##675 : GHC.Prim.Addr# | lq_tmp$x##675 == \"#Dec#NameBeginadd_m_Sn#NameEnd#TypeBeginN -> N -> Proof#TypeEnd#Lambda#NameBeginm#NameEnd#Lambda#NameBeginn#NameEnd#Case#ExpBeginm#ExpEnd#CaseMatch#PatBeginTest1.Z#PatEnd#AutoPreExp#TrivialPreExp#CaseMatch#PatBeginTest1.S n_0#PatEnd#AutoPreExp#AutoExp#ExpBeginadd_m_Sn n_0 n#ExpEnd#AutoExp#ExpBeginadd_m_Sn n_0 n_0#ExpEnd#AutoExp#ExpBeginadd_m_Sn n_0 (S n)#ExpEnd#AutoExp#ExpBeginadd_m_Sn n_0 (S n_0)#ExpEnd#AutoExp#ExpBeginadd_m_Sn n_0 (S Z)#ExpEnd#AutoExp#ExpBeginadd_m_Sn n_0 Z#ExpEnd#TrivialPreExp\"}"]]],[{"spanInfo":{"endCol":3,"startCol":9,"startLine":33,"filename":"src/Test1.hs","endLine":38},"realSpan":true},[["Test1.add_m_Sn","lq_tmp$x##512:Test1.N -> lq_tmp$x##513:Test1.N -> {VV : () | Test1.add lq_tmp$x##512 (Test1.S lq_tmp$x##513) == Test1.S (Test1.add lq_tmp$x##512 lq_tmp$x##513)}"]]],[{"spanInfo":{"endCol":8,"startCol":7,"startLine":24,"filename":"src/Test1.hs","endLine":24},"realSpan":true},[["n","Test1.N"]]],[{"spanInfo":{"endCol":26,"startCol":1,"startLine":24,"filename":"src/Test1.hs","endLine":25},"realSpan":true},[["lq_anf$##7205759403792817187","{lq_tmp$x##477 : Test1.N | lq_tmp$x##477 == ds_d68m}"]]],[{"spanInfo":{"endCol":23,"startCol":22,"startLine":25,"filename":"src/Test1.hs","endLine":25},"realSpan":true},[["m","{lq_tmp$x##503 : Test1.N | lq_tmp$x##503 == m##a676}"]]],[{"spanInfo":{"endCol":26,"startCol":15,"startLine":25,"filename":"src/Test1.hs","endLine":25},"realSpan":true},[["Test1.S","lq_tmp$x##509:Test1.N -> {lq_tmp$x##507 : Test1.N | is$Test1.S lq_tmp$x##507\n                                                    && not (is$Test1.Z lq_tmp$x##507)\n                                                    && lq_tmp$x##507 == Test1.S lq_tmp$x##509\n                                                    && lqdc##$select##Test1.S##1 lq_tmp$x##507 == lq_tmp$x##509}"]]]],"o_bots":[],"o_result":{"tag":"Unsafe","contents":[{"numCstr":2,"numIter":4,"numBrkt":4,"numChck":4,"numVald":1},[{"pos":{"spanInfo":{"endCol":3,"startCol":9,"startLine":33,"filename":"src/Test1.hs","endLine":38},"realSpan":true},"msg":"Liquid Type Mismatch\n    .\n    The inferred type\n      VV : {v : () | v == &&& (add_m_Sn n_a67K n_a67K) (&&& (add_m_Sn n_a67K n_a67K) (&&& (add_m_Sn n_a67K (S n_a67K)) (&&& (add_m_Sn n_a67K (S n_a67K)) (&&& (add_m_Sn n_a67K (S Z)) (&&& (add_m_Sn n_a67K Z) trivial)))))}\n    .\n    is not a subtype of the required type\n      VV : {VV : () | add m (S n) == S (add m n)}\n    .\n    in the context\n      n : Test1.N\n       \n      m : Test1.N\n       \n      n_a67K : Test1.N\n    Constraint id 6"}]]}}