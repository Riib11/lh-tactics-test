(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-datatypes ((Test2.N 0)) ((par () (Test2.Z (Test2.S (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 Test2.N))))))
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun Language.Haskell.TH.Syntax.LitE () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun Language.Haskell.TH.Syntax.DataD () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun papp6 () Int)
(declare-fun Language.Haskell.TH.Syntax.AppTypeE () Int)
(declare-fun Language.Haskell.TH.Syntax.ArithSeqE () Int)
(declare-fun Language.Haskell.TH.Syntax.TupE () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819247$35$$35$d6FF () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819245$35$$35$d6FD () Test2.N)
(declare-fun lq_anf$36$$35$$35$7205759403792819243$35$$35$d6FB () Test2.N)
(declare-fun GHC.List.iterate () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819229$35$$35$d6Fn () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819264$35$$35$d6FW () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819260$35$$35$d6FS () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lq_anf$36$$35$$35$7205759403792819276$35$$35$d6G8 () Int)
(declare-fun Language.Haskell.TH.Syntax.ClassD () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun fst () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun Language.Haskell.TH.Syntax.ForeignD () Int)
(declare-fun snd () Int)
(declare-fun lit$36$lh$45$tactics$45$test$45$0.1.0.0$45$IkQ8v8nt6McGs0CmqHSpyL () Str)
(declare-fun GHC.List.repeat () Int)
(declare-fun GHC.List.break () Int)
(declare-fun VV$35$$35$F$35$$35$11 () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun Language.Haskell.TH.Syntax.TySynInstD () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun Language.Haskell.TH.Syntax.PatSynD () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun Language.Haskell.TH.Syntax.InstanceD () Int)
(declare-fun lq_tmp$36$x$35$$35$1145 () Test2.N)
(declare-fun Language.Haskell.TH.Syntax.TySynD () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun lit$36$N () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792819284$35$$35$d6Gg () Int)
(declare-fun Test2.add () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819280$35$$35$d6Gc () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819253$35$$35$d6FL () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun Language.Haskell.TH.Syntax.LetE () Int)
(declare-fun Language.Haskell.TH.Syntax.NewtypeD () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun VV$35$$35$F$35$$35$6 () Int)
(declare-fun Language.Haskell.TH.Syntax.LabelE () Int)
(declare-fun Language.Haskell.TH.Syntax.MDoE () Int)
(declare-fun Data.Foldable.null () Int)
(declare-fun Language.Haskell.TH.Syntax.RecConE () Int)
(declare-fun n$35$$35$a6DE () Test2.N)
(declare-fun Language.Haskell.TH.Syntax.MultiIfE () Int)
(declare-fun papp1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819234$35$$35$d6Fs () Int)
(declare-fun m$35$$35$a6D3 () Test2.N)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun Language.Haskell.TH.Syntax.ParensE () Int)
(declare-fun papp4 () Int)
(declare-fun Language.Haskell.TH.Syntax.DoE () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun ds_d6Ff () Test2.N)
(declare-fun Language.Haskell.TH.Syntax.LamCaseE () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819244$35$$35$d6FC () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819261$35$$35$d6FT () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819263$35$$35$d6FV () Int)
(declare-fun Language.Haskell.TH.Syntax.FunD () Int)
(declare-fun Language.Haskell.TH.Syntax.SigD () Int)
(declare-fun Test2.add_n_Z () Int)
(declare-fun Language.Haskell.TH.Syntax.CompE () Int)
(declare-fun Language.Haskell.TH.Syntax.AppE () Int)
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun Proof.trivial () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun addrLen () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819279$35$$35$d6Gb () Int)
(declare-fun is$36$GHC.Types.C$35$ () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun lit$36$Test2 () Str)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819273$35$$35$d6G5 () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun Language.Haskell.TH.Syntax.InfixE () Int)
(declare-fun VV$35$$35$F$35$$35$8 () Int)
(declare-fun totalityError () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819268$35$$35$d6G0 () Int)
(declare-fun Language.Haskell.TH.Syntax.ImplicitParamVarE () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft () Test2.N)
(declare-fun lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr () Test2.N)
(declare-fun lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp () Test2.N)
(declare-fun papp2 () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun n$35$$35$a6Eo () Test2.N)
(declare-fun lq_anf$36$$35$$35$7205759403792819237$35$$35$d6Fv () Int)
(declare-fun tail () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819262$35$$35$d6FU () Int)
(declare-fun Language.Haskell.TH.Syntax.UnboxedTupE () Int)
(declare-fun charX () Int)
(declare-fun Language.Haskell.TH.Syntax.CondE () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun GHC.Types.krep$36$$42$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819281$35$$35$d6Gd () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819238$35$$35$d6Fw () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819230$35$$35$d6Fo () Int)
(declare-fun n_a3wL$35$$35$a6DF () Test2.N)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819274$35$$35$d6G6 () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819283$35$$35$d6Gf () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819270$35$$35$d6G2 () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819267$35$$35$d6FZ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun Language.Haskell.TH.Syntax.UnboundVarE () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun isJust () Int)
(declare-fun m$35$$35$a6DD () Test2.N)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun Language.Haskell.TH.Syntax.UnboxedSumE () Int)
(declare-fun GHC.List.span () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819265$35$$35$d6FX () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun n$35$$35$a6D2 () Test2.N)
(declare-fun GHC.List.zipWith () Int)
(declare-fun len () Int)
(declare-fun VV$35$$35$F$35$$35$10 () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun Language.Haskell.TH.Syntax.DataInstD () Int)
(declare-fun Language.Haskell.TH.Syntax.ListE () Int)
(declare-fun Language.Haskell.TH.Syntax.ValD () Int)
(declare-fun Proof.$38$$38$$38$ () Int)
(declare-fun GHC.List.last () Int)
(declare-fun Language.Haskell.TH.Syntax.ConE () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819249$35$$35$d6FH () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819277$35$$35$d6G9 () Int)
(declare-fun Proof.use () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819236$35$$35$d6Fu () Int)
(declare-fun m$35$$35$a6En () Test2.N)
(declare-fun lq_anf$36$$35$$35$7205759403792819232$35$$35$d6Fq () Int)
(declare-fun Language.Haskell.TH.Syntax.DefaultSigD () Int)
(declare-fun Language.Haskell.TH.Syntax.RoleAnnotD () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun VV$35$$35$F$35$$35$7 () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun Language.Haskell.TH.Syntax.StaticE () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun papp7 () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819241$35$$35$d6Fz () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819278$35$$35$d6Ga () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun Language.Haskell.TH.Syntax.UInfixE () Int)
(declare-fun Language.Haskell.TH.Syntax.SigE () Int)
(declare-fun Language.Haskell.TH.Syntax.ClosedTypeFamilyD () Int)
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun Language.Haskell.TH.Syntax.NewtypeInstD () Int)
(declare-fun Test2.add_m_Sn () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun lit$36$$39$Z () Str)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.C$35$$35$$35$1 () Int)
(declare-fun head () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun cast_as () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819266$35$$35$d6FY () Int)
(declare-fun Language.Haskell.TH.Syntax.KiSigD () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819285$35$$35$d6Gh () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun Language.Haskell.TH.Syntax.OpenTypeFamilyD () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819282$35$$35$d6Ge () Int)
(declare-fun Proof.$61$$61$$61$ () Int)
(declare-fun Language.Haskell.TH.Syntax.PragmaD () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819251$35$$35$d6FJ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819255$35$$35$d6FN () Int)
(declare-fun Language.Haskell.TH.Syntax.InfixD () Int)
(declare-fun n_a3xF$35$$35$a6Ep () Test2.N)
(declare-fun VV$35$$35$F$35$$35$9 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819259$35$$35$d6FR () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun papp5 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819240$35$$35$d6Fy () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun GHC.List.init () Int)
(declare-fun lit$36$$39$S () Str)
(declare-fun lq_anf$36$$35$$35$7205759403792819272$35$$35$d6G4 () Int)
(declare-fun Proof.by () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun Language.Haskell.TH.Syntax.DataFamilyD () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun Language.Haskell.TH.Syntax.ImplicitParamBindD () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun n_a3wQ$35$$35$a6DH () Test2.N)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun Language.Haskell.TH.Syntax.LamE () Int)
(declare-fun GHC.List.head () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819228$35$$35$d6Fm () Test2.N)
(declare-fun fromJust () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819269$35$$35$d6G1 () Int)
(declare-fun lq_tmp$36$x$35$$35$678 () Test2.N)
(declare-fun lq_anf$36$$35$$35$7205759403792819242$35$$35$d6FA () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819246$35$$35$d6FE () Int)
(declare-fun lq_tmp$36$x$35$$35$1228 () Int)
(declare-fun Language.Haskell.TH.Syntax.StandaloneDerivD () Int)
(declare-fun Language.Haskell.TH.Syntax.RecUpdE () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun Language.Haskell.TH.Syntax.VarE () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819257$35$$35$d6FP () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819239$35$$35$d6Fx () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun Language.Haskell.TH.Syntax.PatSynSigD () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun Test2.add_comm () Int)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun autolen () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819258$35$$35$d6FQ () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819256$35$$35$d6FO () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819271$35$$35$d6G3 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819252$35$$35$d6FK () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819275$35$$35$d6G7 () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819254$35$$35$d6FM () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.List.take () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819250$35$$35$d6FI () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun Proof.QED () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792819248$35$$35$d6FG () Int)
(declare-fun lq_tmp$36$x$35$$35$508 () Test2.N)
(declare-fun Language.Haskell.TH.Syntax.CaseE () Int)
(declare-fun n$35$$35$a6DG () Test2.N)
(declare-fun lq_tmp$36$x$35$$35$1242 () Int)
(declare-fun papp3 () Int)
(declare-fun apply$35$$35$16 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$18 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$17 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$11 (Int Str) Bool)
(declare-fun apply$35$$35$20 (Int Test2.N) Int)
(declare-fun apply$35$$35$5 (Int Bool) Int)
(declare-fun apply$35$$35$12 (Int Str) Str)
(declare-fun apply$35$$35$13 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$19 (Int (_ BitVec 32)) Test2.N)
(declare-fun apply$35$$35$23 (Int Test2.N) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int Str) Test2.N)
(declare-fun apply$35$$35$22 (Int Test2.N) Str)
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$10 (Int Str) Int)
(declare-fun apply$35$$35$24 (Int Test2.N) Test2.N)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$21 (Int Test2.N) Bool)
(declare-fun apply$35$$35$7 (Int Bool) Str)
(declare-fun apply$35$$35$8 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Int) Test2.N)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$6 (Int Bool) Bool)
(declare-fun apply$35$$35$9 (Int Bool) Test2.N)
(declare-fun coerce$35$$35$16 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$18 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$17 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$11 (Str) Bool)
(declare-fun coerce$35$$35$20 (Test2.N) Int)
(declare-fun coerce$35$$35$5 (Bool) Int)
(declare-fun coerce$35$$35$12 (Str) Str)
(declare-fun coerce$35$$35$13 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$19 ((_ BitVec 32)) Test2.N)
(declare-fun coerce$35$$35$23 (Test2.N) (_ BitVec 32))
(declare-fun coerce$35$$35$14 (Str) Test2.N)
(declare-fun coerce$35$$35$22 (Test2.N) Str)
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$10 (Str) Int)
(declare-fun coerce$35$$35$24 (Test2.N) Test2.N)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$21 (Test2.N) Bool)
(declare-fun coerce$35$$35$7 (Bool) Str)
(declare-fun coerce$35$$35$8 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$4 (Int) Test2.N)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$6 (Bool) Bool)
(declare-fun coerce$35$$35$9 (Bool) Test2.N)
(declare-fun smt_lambda$35$$35$16 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$18 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$17 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$20 (Test2.N Int) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$12 (Str Str) Int)
(declare-fun smt_lambda$35$$35$13 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$19 ((_ BitVec 32) Test2.N) Int)
(declare-fun smt_lambda$35$$35$23 (Test2.N (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 (Str Test2.N) Int)
(declare-fun smt_lambda$35$$35$22 (Test2.N Str) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$10 (Str Int) Int)
(declare-fun smt_lambda$35$$35$24 (Test2.N Test2.N) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$21 (Test2.N Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$8 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Int Test2.N) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Bool Test2.N) Int)
(declare-fun lam_arg$35$$35$1$35$$35$20 () Test2.N)
(declare-fun lam_arg$35$$35$2$35$$35$20 () Test2.N)
(declare-fun lam_arg$35$$35$3$35$$35$20 () Test2.N)
(declare-fun lam_arg$35$$35$4$35$$35$20 () Test2.N)
(declare-fun lam_arg$35$$35$5$35$$35$20 () Test2.N)
(declare-fun lam_arg$35$$35$6$35$$35$20 () Test2.N)
(declare-fun lam_arg$35$$35$7$35$$35$20 () Test2.N)
(declare-fun lam_arg$35$$35$1$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(assert (distinct lit$36$$39$S lit$36$$39$Z lit$36$Test2 lit$36$N lit$36$lh$45$tactics$45$test$45$0.1.0.0$45$IkQ8v8nt6McGs0CmqHSpyL))
(assert (distinct GHC.Types.False GHC.Types.True))


(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))


(assert (= (strLen lit$36$lh$45$tactics$45$test$45$0.1.0.0$45$IkQ8v8nt6McGs0CmqHSpyL) 46))
(assert (= (strLen lit$36$N) 1))
(assert (= (strLen lit$36$Test2) 5))
(assert (= (strLen lit$36$$39$Z) 2))
(assert (= (strLen lit$36$$39$S) 2))
(push 1)
(push 1)
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (and (= Proof.trivial GHC.Tuple.$40$$41$) (= Proof.trivial Proof.trivial)))
(assert (= (is-Test2.S Test2.Z) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (and (is-Test2.Z Test2.Z) (not (is-Test2.S Test2.Z)) (= Test2.Z Test2.Z)))
(assert (= (is-Test2.Z Test2.Z) true))
(assert (not GHC.Types.False))
(assert GHC.Types.True)
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= Proof.trivial GHC.Tuple.$40$$41$))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert true)
(push 1)
(assert (= lq_anf$36$$35$$35$7205759403792819228$35$$35$d6Fm m$35$$35$a6DD))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (= (is-Test2.S Test2.Z) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (is-Test2.Z Test2.Z) true))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= Proof.trivial GHC.Tuple.$40$$41$))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert true)
(push 1)
(assert (and (= VV$35$$35$F$35$$35$11 Proof.trivial) (= VV$35$$35$F$35$$35$11 (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ Proof.trivial) Proof.trivial))))
(assert (= lq_anf$36$$35$$35$7205759403792819228$35$$35$d6Fm m$35$$35$a6DD))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (= (is-Test2.Z (Test2.S n$35$$35$a6DE)) false))
(assert (= (is-Test2.S Test2.Z) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (is-Test2.Z Test2.Z) true))
(assert (= (is-Test2.S (Test2.S n$35$$35$a6DE)) true))
(assert (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S n$35$$35$a6DE)) n$35$$35$a6DE))
(assert (and (is-Test2.Z lq_anf$36$$35$$35$7205759403792819228$35$$35$d6Fm) (not (is-Test2.S lq_anf$36$$35$$35$7205759403792819228$35$$35$d6Fm)) (= lq_anf$36$$35$$35$7205759403792819228$35$$35$d6Fm Test2.Z) (= lq_anf$36$$35$$35$7205759403792819228$35$$35$d6Fm m$35$$35$a6DD)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= Proof.trivial GHC.Tuple.$40$$41$))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert true)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert false)
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z m$35$$35$a6DD)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z m$35$$35$a6DD))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z m$35$$35$a6DD)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z m$35$$35$a6DD))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (= lq_anf$36$$35$$35$7205759403792819240$35$$35$d6Fy lq_anf$36$$35$$35$7205759403792819232$35$$35$d6Fq) (= lq_anf$36$$35$$35$7205759403792819240$35$$35$d6Fy (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819232$35$$35$d6Fq) lq_anf$36$$35$$35$7205759403792819239$35$$35$d6Fx))))
(assert (= lq_anf$36$$35$$35$7205759403792819228$35$$35$d6Fm m$35$$35$a6DD))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (and (= lq_anf$36$$35$$35$7205759403792819234$35$$35$d6Fs (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn n_a3wL$35$$35$a6DF) lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) (Test2.S lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr)))))
(assert (and (is-Test2.S lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft) (not (is-Test2.Z lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft)) (= lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft (Test2.S Test2.Z)) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft) Test2.Z)))
(assert (and (= VV$35$$35$F$35$$35$10 lq_anf$36$$35$$35$7205759403792819242$35$$35$d6FA) (= VV$35$$35$F$35$$35$10 (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819242$35$$35$d6FA) Proof.trivial))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819230$35$$35$d6Fo (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn n_a3wL$35$$35$a6DF) n_a3wL$35$$35$a6DF)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) (Test2.S n_a3wL$35$$35$a6DF)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) n_a3wL$35$$35$a6DF)))))
(assert (= (is-Test2.S (Test2.S Test2.Z)) true))
(assert (= (is-Test2.Z (Test2.S n$35$$35$a6DE)) false))
(assert (= (is-Test2.Z (Test2.S Test2.Z)) false))
(assert (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S Test2.Z)) Test2.Z))
(assert (= (is-Test2.S (Test2.S lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft)) true))
(assert (= (is-Test2.S (Test2.S lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr)) true))
(assert (= (is-Test2.S (Test2.S lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp)) true))
(assert (and (= lq_anf$36$$35$$35$7205759403792819229$35$$35$d6Fn (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn n_a3wL$35$$35$a6DF) n$35$$35$a6DE)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) (Test2.S n$35$$35$a6DE)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) n$35$$35$a6DE)))))
(assert (= (is-Test2.S Test2.Z) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft)) lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft))
(assert (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr)) lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr))
(assert (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp)) lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp))
(assert (and (= lq_anf$36$$35$$35$7205759403792819241$35$$35$d6Fz lq_anf$36$$35$$35$7205759403792819230$35$$35$d6Fo) (= lq_anf$36$$35$$35$7205759403792819241$35$$35$d6Fz (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819230$35$$35$d6Fo) lq_anf$36$$35$$35$7205759403792819240$35$$35$d6Fy))))
(assert (= (is-Test2.Z (Test2.S lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft)) false))
(assert (= (is-Test2.Z (Test2.S lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr)) false))
(assert (= (is-Test2.Z (Test2.S lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp)) false))
(assert (= (is-Test2.Z Test2.Z) true))
(assert (and (is-Test2.S lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp) (not (is-Test2.Z lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp)) (= lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp (Test2.S n$35$$35$a6DE)) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp) n$35$$35$a6DE)))
(assert (and (is-Test2.S lq_anf$36$$35$$35$7205759403792819228$35$$35$d6Fm) (not (is-Test2.Z lq_anf$36$$35$$35$7205759403792819228$35$$35$d6Fm)) (= lq_anf$36$$35$$35$7205759403792819228$35$$35$d6Fm m$35$$35$a6DD) (= lq_anf$36$$35$$35$7205759403792819228$35$$35$d6Fm (Test2.S n_a3wL$35$$35$a6DF)) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 lq_anf$36$$35$$35$7205759403792819228$35$$35$d6Fm) n_a3wL$35$$35$a6DF)))
(assert (and (= lq_anf$36$$35$$35$7205759403792819242$35$$35$d6FA lq_anf$36$$35$$35$7205759403792819229$35$$35$d6Fn) (= lq_anf$36$$35$$35$7205759403792819242$35$$35$d6FA (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819229$35$$35$d6Fn) lq_anf$36$$35$$35$7205759403792819241$35$$35$d6Fz))))
(assert (= (is-Test2.S (Test2.S n$35$$35$a6DE)) true))
(assert (and (= lq_anf$36$$35$$35$7205759403792819239$35$$35$d6Fx lq_anf$36$$35$$35$7205759403792819234$35$$35$d6Fs) (= lq_anf$36$$35$$35$7205759403792819239$35$$35$d6Fx (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819234$35$$35$d6Fs) lq_anf$36$$35$$35$7205759403792819238$35$$35$d6Fw))))
(assert (= (is-Test2.Z (Test2.S n_a3wL$35$$35$a6DF)) false))
(assert (and (= lq_anf$36$$35$$35$7205759403792819232$35$$35$d6Fq (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn n_a3wL$35$$35$a6DF) lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) (Test2.S lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp)))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819236$35$$35$d6Fu (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn n_a3wL$35$$35$a6DF) lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) (Test2.S lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft)))))
(assert (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S n$35$$35$a6DE)) n$35$$35$a6DE))
(assert (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S n_a3wL$35$$35$a6DF)) n_a3wL$35$$35$a6DF))
(assert (and (is-Test2.S lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr) (not (is-Test2.Z lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr)) (= lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr (Test2.S n_a3wL$35$$35$a6DF)) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr) n_a3wL$35$$35$a6DF)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= Proof.trivial GHC.Tuple.$40$$41$))
(assert (= (is-Test2.S (Test2.S n_a3wL$35$$35$a6DF)) true))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (and (= lq_anf$36$$35$$35$7205759403792819238$35$$35$d6Fw lq_anf$36$$35$$35$7205759403792819236$35$$35$d6Fu) (= lq_anf$36$$35$$35$7205759403792819238$35$$35$d6Fw (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819236$35$$35$d6Fu) lq_anf$36$$35$$35$7205759403792819237$35$$35$d6Fv))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819237$35$$35$d6Fv (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn n_a3wL$35$$35$a6DF) Test2.Z)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) (Test2.S Test2.Z)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) Test2.Z)))))
(assert true)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z m$35$$35$a6DD)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z m$35$$35$a6DD))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z m$35$$35$a6DD)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z m$35$$35$a6DD))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert false)
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(assert (and (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S (Test2.S Test2.Z))) (Test2.S Test2.Z)) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819234$35$$35$d6Fs) lq_anf$36$$35$$35$7205759403792819238$35$$35$d6Fw) lq_anf$36$$35$$35$7205759403792819234$35$$35$d6Fs) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) (Test2.S lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr)) (ite (is-Test2.Z n_a3wL$35$$35$a6DF) (Test2.S lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3wL$35$$35$a6DF)) (Test2.S lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr))))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) (Test2.S lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp)) (ite (is-Test2.Z n_a3wL$35$$35$a6DF) (Test2.S lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3wL$35$$35$a6DF)) (Test2.S lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp))))) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft) Test2.Z) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) (Test2.S Test2.Z)) (ite (is-Test2.Z n_a3wL$35$$35$a6DF) (Test2.S Test2.Z) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3wL$35$$35$a6DF)) (Test2.S Test2.Z))))) (= (is-Test2.S (Test2.S Test2.Z)) true) (= (is-Test2.Z (Test2.S n$35$$35$a6DE)) false) (= (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) n$35$$35$a6DE)) (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) n$35$$35$a6DE (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))) n$35$$35$a6DE))))) (= (is-Test2.Z (Test2.S Test2.Z)) false) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) (Test2.S lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft)) (ite (is-Test2.Z n_a3wL$35$$35$a6DF) (Test2.S (Test2.S Test2.Z)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3wL$35$$35$a6DF)) (Test2.S (Test2.S Test2.Z)))))) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819230$35$$35$d6Fo) lq_anf$36$$35$$35$7205759403792819240$35$$35$d6Fy) lq_anf$36$$35$$35$7205759403792819230$35$$35$d6Fo) (= (is-Test2.Z (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) n$35$$35$a6DE))) false) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) (Test2.S n$35$$35$a6DE)))) (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) (Test2.S n$35$$35$a6DE))) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S Test2.Z)) Test2.Z) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft) (ite (is-Test2.Z n_a3wL$35$$35$a6DF) (Test2.S Test2.Z) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3wL$35$$35$a6DF)) (Test2.S Test2.Z))))) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819232$35$$35$d6Fq) lq_anf$36$$35$$35$7205759403792819239$35$$35$d6Fx) lq_anf$36$$35$$35$7205759403792819232$35$$35$d6Fq) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) Test2.Z) (ite (is-Test2.Z n_a3wL$35$$35$a6DF) Test2.Z (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3wL$35$$35$a6DF)) Test2.Z)))) (= (is-Test2.S (Test2.S lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft)) true) (= (is-Test2.S (Test2.S lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr)) true) (= (is-Test2.S (Test2.S lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp)) true) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) n_a3wL$35$$35$a6DF) (ite (is-Test2.Z n_a3wL$35$$35$a6DF) n_a3wL$35$$35$a6DF (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3wL$35$$35$a6DF)) n_a3wL$35$$35$a6DF)))) (= (is-Test2.Z (Test2.S (Test2.S Test2.Z))) false) (= (is-Test2.S (Test2.S (Test2.S Test2.Z))) true) (= (is-Test2.S Test2.Z) false) (= (is-Test2.Z lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft) false) (= (is-Test2.S (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) (Test2.S n$35$$35$a6DE)))) true) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft)) lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr)) lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp)) lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819242$35$$35$d6FA) Proof.trivial) lq_anf$36$$35$$35$7205759403792819242$35$$35$d6FA) (= (is-Test2.Z (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) n$35$$35$a6DE (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))) n$35$$35$a6DE))))) false) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp) (ite (is-Test2.Z n_a3wL$35$$35$a6DF) lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3wL$35$$35$a6DF)) lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp)))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr) (ite (is-Test2.Z n_a3wL$35$$35$a6DF) lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3wL$35$$35$a6DF)) lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr)))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add m$35$$35$a6DD) (Test2.S n$35$$35$a6DE)) (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) (Test2.S n$35$$35$a6DE) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))) (Test2.S n$35$$35$a6DE)))))) (= (is-Test2.Z (Test2.S lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft)) false) (= (is-Test2.Z (Test2.S lq_anf$36$$35$$35$7205759403792819233$35$$35$d6Fr)) false) (= (is-Test2.Z (Test2.S lq_anf$36$$35$$35$7205759403792819231$35$$35$d6Fp)) false) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) n$35$$35$a6DE))) (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) n$35$$35$a6DE)) (= (is-Test2.S (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) (Test2.S n$35$$35$a6DE) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))) (Test2.S n$35$$35$a6DE)))))) true) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) (Test2.S n$35$$35$a6DE) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))) (Test2.S n$35$$35$a6DE)))))) (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) (Test2.S n$35$$35$a6DE) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))) (Test2.S n$35$$35$a6DE))))) (= (is-Test2.S (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) n$35$$35$a6DE (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))) n$35$$35$a6DE))))) true) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) n$35$$35$a6DE (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))) n$35$$35$a6DE))))) (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) n$35$$35$a6DE (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))) n$35$$35$a6DE)))) (= (is-Test2.Z Test2.Z) true) (= (is-Test2.S (Test2.S n$35$$35$a6DE)) true) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) (Test2.S n$35$$35$a6DE)) (ite (is-Test2.Z n_a3wL$35$$35$a6DF) (Test2.S n$35$$35$a6DE) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3wL$35$$35$a6DF)) (Test2.S n$35$$35$a6DE))))) (= (is-Test2.S (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) n$35$$35$a6DE))) true) (= (is-Test2.Z (Test2.S n_a3wL$35$$35$a6DF)) false) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819236$35$$35$d6Fu) lq_anf$36$$35$$35$7205759403792819237$35$$35$d6Fv) lq_anf$36$$35$$35$7205759403792819236$35$$35$d6Fu) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S n$35$$35$a6DE)) n$35$$35$a6DE) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) n$35$$35$a6DE) (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) n$35$$35$a6DE (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))) n$35$$35$a6DE)))) (= (Test2.S lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft) (Test2.S (Test2.S Test2.Z))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) n$35$$35$a6DE) (ite (is-Test2.Z n_a3wL$35$$35$a6DF) n$35$$35$a6DE (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3wL$35$$35$a6DF)) n$35$$35$a6DE)))) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S n_a3wL$35$$35$a6DF)) n_a3wL$35$$35$a6DF) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add m$35$$35$a6DD) (Test2.S n$35$$35$a6DE)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) (Test2.S n$35$$35$a6DE)))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add m$35$$35$a6DD) n$35$$35$a6DE) (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) n$35$$35$a6DE (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))) n$35$$35$a6DE))))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) (Test2.S n$35$$35$a6DE)) (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) (Test2.S n$35$$35$a6DE) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))) (Test2.S n$35$$35$a6DE))))) (= (is-Test2.S lq_anf$36$$35$$35$7205759403792819235$35$$35$d6Ft) true) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add m$35$$35$a6DD) n$35$$35$a6DE) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) n$35$$35$a6DE))) (= (is-Test2.Z (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) (Test2.S n$35$$35$a6DE)))) false) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819229$35$$35$d6Fn) lq_anf$36$$35$$35$7205759403792819241$35$$35$d6Fz) lq_anf$36$$35$$35$7205759403792819229$35$$35$d6Fn) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= Proof.trivial GHC.Tuple.$40$$41$) (= (is-Test2.S (Test2.S n_a3wL$35$$35$a6DF)) true) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (is-Test2.Z (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) (Test2.S n$35$$35$a6DE) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))) (Test2.S n$35$$35$a6DE)))))) false) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wL$35$$35$a6DF) (Test2.S n_a3wL$35$$35$a6DF)) (ite (is-Test2.Z n_a3wL$35$$35$a6DF) (Test2.S n_a3wL$35$$35$a6DF) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3wL$35$$35$a6DF)) (Test2.S n_a3wL$35$$35$a6DF))))) (= (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) (Test2.S n$35$$35$a6DE))) (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)) (Test2.S n$35$$35$a6DE) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))) (Test2.S n$35$$35$a6DE))))))))
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6DD)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wL$35$$35$a6DF)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wL$35$$35$a6DF))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (= (is-Test2.S Test2.Z) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (is-Test2.Z Test2.Z) true))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= Proof.trivial GHC.Tuple.$40$$41$))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert true)
(push 1)
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (= lq_anf$36$$35$$35$7205759403792819243$35$$35$d6FB n$35$$35$a6DG))
(assert (= (is-Test2.S Test2.Z) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (is-Test2.Z Test2.Z) true))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= Proof.trivial GHC.Tuple.$40$$41$))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert true)
(push 1)
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (= lq_anf$36$$35$$35$7205759403792819243$35$$35$d6FB n$35$$35$a6DG))
(assert (= (is-Test2.S Test2.Z) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (is-Test2.Z Test2.Z) true))
(assert (and (= VV$35$$35$F$35$$35$9 Proof.trivial) (= VV$35$$35$F$35$$35$9 (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ Proof.trivial) Proof.trivial))))
(assert (and (is-Test2.Z lq_anf$36$$35$$35$7205759403792819243$35$$35$d6FB) (not (is-Test2.S lq_anf$36$$35$$35$7205759403792819243$35$$35$d6FB)) (= lq_anf$36$$35$$35$7205759403792819243$35$$35$d6FB Test2.Z) (= lq_anf$36$$35$$35$7205759403792819243$35$$35$d6FB n$35$$35$a6DG)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= Proof.trivial GHC.Tuple.$40$$41$))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert true)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6DG)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6DG))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert false)
(check-sat)
; SMT Says: Unsat
(pop 1)
(pop 1)
(push 1)
(assert (and (= VV$35$$35$F$35$$35$8 lq_anf$36$$35$$35$7205759403792819244$35$$35$d6FC) (= VV$35$$35$F$35$$35$8 (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819244$35$$35$d6FC) Proof.trivial))))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (and (= lq_anf$36$$35$$35$7205759403792819244$35$$35$d6FC (apply$35$$35$20 Test2.add_n_Z n_a3wQ$35$$35$a6DH)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wQ$35$$35$a6DH) Test2.Z) n_a3wQ$35$$35$a6DH)))
(assert (= lq_anf$36$$35$$35$7205759403792819243$35$$35$d6FB n$35$$35$a6DG))
(assert (= (is-Test2.S Test2.Z) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (is-Test2.Z Test2.Z) true))
(assert (and (is-Test2.S lq_anf$36$$35$$35$7205759403792819243$35$$35$d6FB) (not (is-Test2.Z lq_anf$36$$35$$35$7205759403792819243$35$$35$d6FB)) (= lq_anf$36$$35$$35$7205759403792819243$35$$35$d6FB n$35$$35$a6DG) (= lq_anf$36$$35$$35$7205759403792819243$35$$35$d6FB (Test2.S n_a3wQ$35$$35$a6DH)) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 lq_anf$36$$35$$35$7205759403792819243$35$$35$d6FB) n_a3wQ$35$$35$a6DH)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= Proof.trivial GHC.Tuple.$40$$41$))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert true)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wQ$35$$35$a6DH)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wQ$35$$35$a6DH))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wQ$35$$35$a6DH)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wQ$35$$35$a6DH))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6DG)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6DG))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)))
(check-sat)
; SMT Says: Sat
(pop 1)
(assert (and (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)) Test2.Z (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG))) Test2.Z))))) (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)) Test2.Z (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG))) Test2.Z)))) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)) Test2.Z))) (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)) Test2.Z)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3wQ$35$$35$a6DH) Test2.Z) (ite (is-Test2.Z n_a3wQ$35$$35$a6DH) Test2.Z (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3wQ$35$$35$a6DH)) Test2.Z)))) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0) (= (is-Test2.Z (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)) Test2.Z))) false) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)) Test2.Z) (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)) Test2.Z (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG))) Test2.Z)))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6DG) Test2.Z) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)) Test2.Z))) (= (is-Test2.S Test2.Z) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (is-Test2.Z (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)) Test2.Z (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG))) Test2.Z))))) false) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819244$35$$35$d6FC) Proof.trivial) lq_anf$36$$35$$35$7205759403792819244$35$$35$d6FC) (= (is-Test2.S (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)) Test2.Z (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG))) Test2.Z))))) true) (= (is-Test2.Z Test2.Z) true) (= (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)) Test2.Z)) (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)) Test2.Z (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG))) Test2.Z))))) (= (is-Test2.S (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)) Test2.Z))) true) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6DG) Test2.Z) (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)) Test2.Z (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG))) Test2.Z))))) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= Proof.trivial GHC.Tuple.$40$$41$) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false)))
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3wQ$35$$35$a6DH)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3wQ$35$$35$a6DH))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6DG)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(push 1)
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (= lq_anf$36$$35$$35$7205759403792819245$35$$35$d6FD m$35$$35$a6En))
(assert (= (is-Test2.S Test2.Z) false))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (is-Test2.Z Test2.Z) true))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (= Proof.trivial GHC.Tuple.$40$$41$))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert true)
(push 1)
(assert (and (= lq_anf$36$$35$$35$7205759403792819248$35$$35$d6FG (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn Test2.Z) n$35$$35$a6Eo)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) (Test2.S n$35$$35$a6Eo)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) n$35$$35$a6Eo)))))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (and (= VV$35$$35$F$35$$35$7 lq_anf$36$$35$$35$7205759403792819256$35$$35$d6FO) (= VV$35$$35$F$35$$35$7 (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819256$35$$35$d6FO) Proof.trivial))))
(assert (and (is-Test2.Z lq_anf$36$$35$$35$7205759403792819245$35$$35$d6FD) (not (is-Test2.S lq_anf$36$$35$$35$7205759403792819245$35$$35$d6FD)) (= lq_anf$36$$35$$35$7205759403792819245$35$$35$d6FD Test2.Z) (= lq_anf$36$$35$$35$7205759403792819245$35$$35$d6FD m$35$$35$a6En)))
(assert (= lq_anf$36$$35$$35$7205759403792819245$35$$35$d6FD m$35$$35$a6En))
(assert (= (is-Test2.S (Test2.S Test2.Z)) true))
(assert (= (is-Test2.Z (Test2.S Test2.Z)) false))
(assert (and (= lq_anf$36$$35$$35$7205759403792819253$35$$35$d6FL lq_anf$36$$35$$35$7205759403792819249$35$$35$d6FH) (= lq_anf$36$$35$$35$7205759403792819253$35$$35$d6FL (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819249$35$$35$d6FH) lq_anf$36$$35$$35$7205759403792819252$35$$35$d6FK))))
(assert (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S Test2.Z)) Test2.Z))
(assert (= (is-Test2.S Test2.Z) false))
(assert (and (= lq_anf$36$$35$$35$7205759403792819254$35$$35$d6FM lq_anf$36$$35$$35$7205759403792819248$35$$35$d6FG) (= lq_anf$36$$35$$35$7205759403792819254$35$$35$d6FM (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819248$35$$35$d6FG) lq_anf$36$$35$$35$7205759403792819253$35$$35$d6FL))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S n$35$$35$a6Eo)) n$35$$35$a6Eo))
(assert (and (= lq_anf$36$$35$$35$7205759403792819255$35$$35$d6FN lq_anf$36$$35$$35$7205759403792819247$35$$35$d6FF) (= lq_anf$36$$35$$35$7205759403792819255$35$$35$d6FN (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819247$35$$35$d6FF) lq_anf$36$$35$$35$7205759403792819254$35$$35$d6FM))))
(assert (= (is-Test2.Z Test2.Z) true))
(assert (and (= lq_anf$36$$35$$35$7205759403792819252$35$$35$d6FK lq_anf$36$$35$$35$7205759403792819250$35$$35$d6FI) (= lq_anf$36$$35$$35$7205759403792819252$35$$35$d6FK (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819250$35$$35$d6FI) lq_anf$36$$35$$35$7205759403792819251$35$$35$d6FJ))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819250$35$$35$d6FI (apply$35$$35$20 Test2.add_n_Z n$35$$35$a6Eo)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) Test2.Z) n$35$$35$a6Eo)))
(assert (and (= lq_anf$36$$35$$35$7205759403792819256$35$$35$d6FO lq_anf$36$$35$$35$7205759403792819246$35$$35$d6FE) (= lq_anf$36$$35$$35$7205759403792819256$35$$35$d6FO (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819246$35$$35$d6FE) lq_anf$36$$35$$35$7205759403792819255$35$$35$d6FN))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819246$35$$35$d6FE (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn n$35$$35$a6Eo) n$35$$35$a6Eo)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) (Test2.S n$35$$35$a6Eo)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) n$35$$35$a6Eo)))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819251$35$$35$d6FJ (apply$35$$35$20 Test2.add_n_Z Test2.Z)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) Test2.Z) Test2.Z)))
(assert (and (= lq_anf$36$$35$$35$7205759403792819249$35$$35$d6FH (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn Test2.Z) Test2.Z)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) (Test2.S Test2.Z)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) Test2.Z)))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (and (= lq_anf$36$$35$$35$7205759403792819247$35$$35$d6FF (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn n$35$$35$a6Eo) Test2.Z)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) (Test2.S Test2.Z)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) Test2.Z)))))
(assert (= Proof.trivial GHC.Tuple.$40$$41$))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (is-Test2.Z (Test2.S n$35$$35$a6Eo)) false))
(assert (= (is-Test2.S (Test2.S n$35$$35$a6Eo)) true))
(assert true)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z m$35$$35$a6En)))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z m$35$$35$a6En))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert true)
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert true)
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert false)
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert true)
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert true)
(check-sat)
; SMT Says: Sat
(pop 1)
(assert (and (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) Test2.Z) (ite (is-Test2.Z n$35$$35$a6Eo) Test2.Z (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6Eo)) Test2.Z)))) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) m$35$$35$a6En) (ite (is-Test2.Z n$35$$35$a6Eo) m$35$$35$a6En (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6Eo)) m$35$$35$a6En)))) (= (is-Test2.S (Test2.S Test2.Z)) true) (= (is-Test2.Z (Test2.S Test2.Z)) false) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S Test2.Z)) Test2.Z) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) (Test2.S n$35$$35$a6Eo)) (ite (is-Test2.Z n$35$$35$a6Eo) (Test2.S n$35$$35$a6Eo) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6Eo)) (Test2.S n$35$$35$a6Eo))))) (= (is-Test2.S Test2.Z) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819249$35$$35$d6FH) lq_anf$36$$35$$35$7205759403792819252$35$$35$d6FK) lq_anf$36$$35$$35$7205759403792819249$35$$35$d6FH) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S n$35$$35$a6Eo)) n$35$$35$a6Eo) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819247$35$$35$d6FF) lq_anf$36$$35$$35$7205759403792819254$35$$35$d6FM) lq_anf$36$$35$$35$7205759403792819247$35$$35$d6FF) (= (is-Test2.S lq_anf$36$$35$$35$7205759403792819245$35$$35$d6FD) false) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) n$35$$35$a6Eo) n$35$$35$a6Eo) (= (is-Test2.Z Test2.Z) true) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819256$35$$35$d6FO) Proof.trivial) lq_anf$36$$35$$35$7205759403792819256$35$$35$d6FO) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819250$35$$35$d6FI) lq_anf$36$$35$$35$7205759403792819251$35$$35$d6FJ) lq_anf$36$$35$$35$7205759403792819250$35$$35$d6FI) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) (Test2.S n$35$$35$a6Eo)) (Test2.S n$35$$35$a6Eo)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add m$35$$35$a6En) n$35$$35$a6Eo) n$35$$35$a6Eo) (= (is-Test2.Z lq_anf$36$$35$$35$7205759403792819245$35$$35$d6FD) true) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819246$35$$35$d6FE) lq_anf$36$$35$$35$7205759403792819255$35$$35$d6FN) lq_anf$36$$35$$35$7205759403792819246$35$$35$d6FE) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) (Test2.S Test2.Z)) (ite (is-Test2.Z n$35$$35$a6Eo) (Test2.S Test2.Z) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6Eo)) (Test2.S Test2.Z))))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) n$35$$35$a6Eo) (ite (is-Test2.Z n$35$$35$a6Eo) n$35$$35$a6Eo (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6Eo)) n$35$$35$a6Eo)))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) (Test2.S Test2.Z)) (Test2.S Test2.Z)) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819248$35$$35$d6FG) lq_anf$36$$35$$35$7205759403792819253$35$$35$d6FL) lq_anf$36$$35$$35$7205759403792819248$35$$35$d6FG) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) Test2.Z) Test2.Z) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= Proof.trivial GHC.Tuple.$40$$41$) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (is-Test2.Z (Test2.S n$35$$35$a6Eo)) false) (= (is-Test2.S (Test2.S n$35$$35$a6Eo)) true)))
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(push 1)
(assert (and (= lq_anf$36$$35$$35$7205759403792819279$35$$35$d6Gb lq_anf$36$$35$$35$7205759403792819263$35$$35$d6FV) (= lq_anf$36$$35$$35$7205759403792819279$35$$35$d6Gb (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819263$35$$35$d6FV) lq_anf$36$$35$$35$7205759403792819278$35$$35$d6Ga))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819258$35$$35$d6FQ (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn n$35$$35$a6Eo) n_a3xF$35$$35$a6Ep)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) (Test2.S n_a3xF$35$$35$a6Ep)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) n_a3xF$35$$35$a6Ep)))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819277$35$$35$d6G9 lq_anf$36$$35$$35$7205759403792819265$35$$35$d6FX) (= lq_anf$36$$35$$35$7205759403792819277$35$$35$d6G9 (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819265$35$$35$d6FX) lq_anf$36$$35$$35$7205759403792819276$35$$35$d6G8))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819273$35$$35$d6G5 lq_anf$36$$35$$35$7205759403792819269$35$$35$d6G1) (= lq_anf$36$$35$$35$7205759403792819273$35$$35$d6G5 (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819269$35$$35$d6G1) lq_anf$36$$35$$35$7205759403792819272$35$$35$d6G4))))
(assert (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0))
(assert (and (= lq_anf$36$$35$$35$7205759403792819285$35$$35$d6Gh lq_anf$36$$35$$35$7205759403792819257$35$$35$d6FP) (= lq_anf$36$$35$$35$7205759403792819285$35$$35$d6Gh (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819257$35$$35$d6FP) lq_anf$36$$35$$35$7205759403792819284$35$$35$d6Gg))))
(assert (= lq_anf$36$$35$$35$7205759403792819245$35$$35$d6FD m$35$$35$a6En))
(assert (= (is-Test2.S (Test2.S Test2.Z)) true))
(assert (and (= lq_anf$36$$35$$35$7205759403792819271$35$$35$d6G3 (apply$35$$35$20 (apply$35$$35$20 Test2.add_comm n_a3xF$35$$35$a6Ep) Test2.Z)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3xF$35$$35$a6Ep) Test2.Z) (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) n_a3xF$35$$35$a6Ep))))
(assert (= (is-Test2.Z (Test2.S Test2.Z)) false))
(assert (and (= lq_anf$36$$35$$35$7205759403792819284$35$$35$d6Gg lq_anf$36$$35$$35$7205759403792819258$35$$35$d6FQ) (= lq_anf$36$$35$$35$7205759403792819284$35$$35$d6Gg (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819258$35$$35$d6FQ) lq_anf$36$$35$$35$7205759403792819283$35$$35$d6Gf))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819259$35$$35$d6FR (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn n$35$$35$a6Eo) Test2.Z)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) (Test2.S Test2.Z)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) Test2.Z)))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819261$35$$35$d6FT (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn n_a3xF$35$$35$a6Ep) n_a3xF$35$$35$a6Ep)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3xF$35$$35$a6Ep) (Test2.S n_a3xF$35$$35$a6Ep)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3xF$35$$35$a6Ep) n_a3xF$35$$35$a6Ep)))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819265$35$$35$d6FX (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn Test2.Z) Test2.Z)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) (Test2.S Test2.Z)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) Test2.Z)))))
(assert (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S Test2.Z)) Test2.Z))
(assert (and (= lq_anf$36$$35$$35$7205759403792819269$35$$35$d6G1 (apply$35$$35$20 (apply$35$$35$20 Test2.add_comm n_a3xF$35$$35$a6Ep) n$35$$35$a6Eo)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3xF$35$$35$a6Ep) n$35$$35$a6Eo) (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) n_a3xF$35$$35$a6Ep))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819264$35$$35$d6FW (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn Test2.Z) n_a3xF$35$$35$a6Ep)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) (Test2.S n_a3xF$35$$35$a6Ep)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) n_a3xF$35$$35$a6Ep)))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819263$35$$35$d6FV (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn Test2.Z) n$35$$35$a6Eo)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) (Test2.S n$35$$35$a6Eo)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) n$35$$35$a6Eo)))))
(assert (= (is-Test2.S Test2.Z) false))
(assert (and (= lq_anf$36$$35$$35$7205759403792819281$35$$35$d6Gd lq_anf$36$$35$$35$7205759403792819261$35$$35$d6FT) (= lq_anf$36$$35$$35$7205759403792819281$35$$35$d6Gd (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819261$35$$35$d6FT) lq_anf$36$$35$$35$7205759403792819280$35$$35$d6Gc))))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false))
(assert (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S n$35$$35$a6Eo)) n$35$$35$a6Eo))
(assert (and (= lq_anf$36$$35$$35$7205759403792819262$35$$35$d6FU (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn n_a3xF$35$$35$a6Ep) Test2.Z)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3xF$35$$35$a6Ep) (Test2.S Test2.Z)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3xF$35$$35$a6Ep) Test2.Z)))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819267$35$$35$d6FZ (apply$35$$35$20 Test2.add_n_Z n_a3xF$35$$35$a6Ep)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3xF$35$$35$a6Ep) Test2.Z) n_a3xF$35$$35$a6Ep)))
(assert (and (= VV$35$$35$F$35$$35$6 lq_anf$36$$35$$35$7205759403792819285$35$$35$d6Gh) (= VV$35$$35$F$35$$35$6 (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819285$35$$35$d6Gh) Proof.trivial))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819257$35$$35$d6FP (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn n$35$$35$a6Eo) n$35$$35$a6Eo)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) (Test2.S n$35$$35$a6Eo)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) n$35$$35$a6Eo)))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819283$35$$35$d6Gf lq_anf$36$$35$$35$7205759403792819259$35$$35$d6FR) (= lq_anf$36$$35$$35$7205759403792819283$35$$35$d6Gf (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819259$35$$35$d6FR) lq_anf$36$$35$$35$7205759403792819282$35$$35$d6Ge))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819274$35$$35$d6G6 lq_anf$36$$35$$35$7205759403792819268$35$$35$d6G0) (= lq_anf$36$$35$$35$7205759403792819274$35$$35$d6G6 (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819268$35$$35$d6G0) lq_anf$36$$35$$35$7205759403792819273$35$$35$d6G5))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819276$35$$35$d6G8 lq_anf$36$$35$$35$7205759403792819266$35$$35$d6FY) (= lq_anf$36$$35$$35$7205759403792819276$35$$35$d6G8 (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819266$35$$35$d6FY) lq_anf$36$$35$$35$7205759403792819275$35$$35$d6G7))))
(assert (= (is-Test2.Z Test2.Z) true))
(assert (= lq_anf$36$$35$$35$7205759403792819270$35$$35$d6G2 (apply$35$$35$20 (apply$35$$35$20 Test2.add_comm n_a3xF$35$$35$a6Ep) n_a3xF$35$$35$a6Ep)))
(assert (and (= lq_anf$36$$35$$35$7205759403792819278$35$$35$d6Ga lq_anf$36$$35$$35$7205759403792819264$35$$35$d6FW) (= lq_anf$36$$35$$35$7205759403792819278$35$$35$d6Ga (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819264$35$$35$d6FW) lq_anf$36$$35$$35$7205759403792819277$35$$35$d6G9))))
(assert (= (is-Test2.Z (Test2.S n_a3xF$35$$35$a6Ep)) false))
(assert (= (is-Test2.S (Test2.S n_a3xF$35$$35$a6Ep)) true))
(assert (and (= lq_anf$36$$35$$35$7205759403792819268$35$$35$d6G0 (apply$35$$35$20 Test2.add_n_Z Test2.Z)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) Test2.Z) Test2.Z)))
(assert (and (= lq_anf$36$$35$$35$7205759403792819266$35$$35$d6FY (apply$35$$35$20 Test2.add_n_Z n$35$$35$a6Eo)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) Test2.Z) n$35$$35$a6Eo)))
(assert (and (= lq_anf$36$$35$$35$7205759403792819260$35$$35$d6FS (apply$35$$35$20 (apply$35$$35$20 Test2.add_m_Sn n_a3xF$35$$35$a6Ep) n$35$$35$a6Eo)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3xF$35$$35$a6Ep) (Test2.S n$35$$35$a6Eo)) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3xF$35$$35$a6Ep) n$35$$35$a6Eo)))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819272$35$$35$d6G4 lq_anf$36$$35$$35$7205759403792819270$35$$35$d6G2) (= lq_anf$36$$35$$35$7205759403792819272$35$$35$d6G4 (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819270$35$$35$d6G2) lq_anf$36$$35$$35$7205759403792819271$35$$35$d6G3))))
(assert (and (is-Test2.S lq_anf$36$$35$$35$7205759403792819245$35$$35$d6FD) (not (is-Test2.Z lq_anf$36$$35$$35$7205759403792819245$35$$35$d6FD)) (= lq_anf$36$$35$$35$7205759403792819245$35$$35$d6FD m$35$$35$a6En) (= lq_anf$36$$35$$35$7205759403792819245$35$$35$d6FD (Test2.S n_a3xF$35$$35$a6Ep)) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 lq_anf$36$$35$$35$7205759403792819245$35$$35$d6FD) n_a3xF$35$$35$a6Ep)))
(assert (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true))
(assert (and (= lq_anf$36$$35$$35$7205759403792819280$35$$35$d6Gc lq_anf$36$$35$$35$7205759403792819262$35$$35$d6FU) (= lq_anf$36$$35$$35$7205759403792819280$35$$35$d6Gc (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819262$35$$35$d6FU) lq_anf$36$$35$$35$7205759403792819279$35$$35$d6Gb))))
(assert (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S n_a3xF$35$$35$a6Ep)) n_a3xF$35$$35$a6Ep))
(assert (and (= lq_anf$36$$35$$35$7205759403792819275$35$$35$d6G7 lq_anf$36$$35$$35$7205759403792819267$35$$35$d6FZ) (= lq_anf$36$$35$$35$7205759403792819275$35$$35$d6G7 (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819267$35$$35$d6FZ) lq_anf$36$$35$$35$7205759403792819274$35$$35$d6G6))))
(assert (and (= lq_anf$36$$35$$35$7205759403792819282$35$$35$d6Ge lq_anf$36$$35$$35$7205759403792819260$35$$35$d6FS) (= lq_anf$36$$35$$35$7205759403792819282$35$$35$d6Ge (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819260$35$$35$d6FS) lq_anf$36$$35$$35$7205759403792819281$35$$35$d6Gd))))
(assert (= Proof.trivial GHC.Tuple.$40$$41$))
(assert (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false))
(assert (= (is-Test2.Z (Test2.S n$35$$35$a6Eo)) false))
(assert (= (is-Test2.S (Test2.S n$35$$35$a6Eo)) true))
(assert true)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z m$35$$35$a6En)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z m$35$$35$a6En))
(check-sat)
; SMT Says: Unsat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert true)
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert true)
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert true)
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert true)
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert true)
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert true)
(check-sat)
; SMT Says: Sat
(pop 1)
(assert (and (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819269$35$$35$d6G1) lq_anf$36$$35$$35$7205759403792819272$35$$35$d6G4) lq_anf$36$$35$$35$7205759403792819269$35$$35$d6G1) (= (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)) n$35$$35$a6Eo)) (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)) n$35$$35$a6Eo (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En))) n$35$$35$a6Eo))))) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819262$35$$35$d6FU) lq_anf$36$$35$$35$7205759403792819279$35$$35$d6Gb) lq_anf$36$$35$$35$7205759403792819262$35$$35$d6FU) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) Test2.Z) (ite (is-Test2.Z n$35$$35$a6Eo) Test2.Z (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6Eo)) Test2.Z)))) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819285$35$$35$d6Gh) Proof.trivial) lq_anf$36$$35$$35$7205759403792819285$35$$35$d6Gh) (= (apply$35$$35$0 (as len Int) (as GHC.Types.$91$$93$ Int)) 0) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) m$35$$35$a6En) (ite (is-Test2.Z n$35$$35$a6Eo) m$35$$35$a6En (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6Eo)) m$35$$35$a6En)))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) (Test2.S n_a3xF$35$$35$a6Ep)) (ite (is-Test2.Z n$35$$35$a6Eo) (Test2.S n_a3xF$35$$35$a6Ep) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6Eo)) (Test2.S n_a3xF$35$$35$a6Ep))))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3xF$35$$35$a6Ep) n$35$$35$a6Eo) (ite (is-Test2.Z n_a3xF$35$$35$a6Ep) n$35$$35$a6Eo (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3xF$35$$35$a6Ep)) n$35$$35$a6Eo)))) (= (is-Test2.S (Test2.S Test2.Z)) true) (= (is-Test2.Z (Test2.S Test2.Z)) false) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3xF$35$$35$a6Ep) Test2.Z) (ite (is-Test2.Z n_a3xF$35$$35$a6Ep) Test2.Z (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3xF$35$$35$a6Ep)) Test2.Z)))) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S Test2.Z)) Test2.Z) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) (Test2.S n$35$$35$a6Eo)) (ite (is-Test2.Z n$35$$35$a6Eo) (Test2.S n$35$$35$a6Eo) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6Eo)) (Test2.S n$35$$35$a6Eo))))) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)) n$35$$35$a6Eo (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En))) n$35$$35$a6Eo))))) (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)) n$35$$35$a6Eo (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En))) n$35$$35$a6Eo)))) (= (is-Test2.S Test2.Z) false) (= (is-Test2.Z (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)) n$35$$35$a6Eo (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En))) n$35$$35$a6Eo))))) false) (= (apply$35$$35$1 (as is$36$GHC.Types.$58$ Int) (as GHC.Types.$91$$93$ Int)) false) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819266$35$$35$d6FY) lq_anf$36$$35$$35$7205759403792819275$35$$35$d6G7) lq_anf$36$$35$$35$7205759403792819266$35$$35$d6FY) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S n$35$$35$a6Eo)) n$35$$35$a6Eo) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819260$35$$35$d6FS) lq_anf$36$$35$$35$7205759403792819281$35$$35$d6Gd) lq_anf$36$$35$$35$7205759403792819260$35$$35$d6FS) (= (is-Test2.Z (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)) n$35$$35$a6Eo))) false) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add m$35$$35$a6En) n$35$$35$a6Eo) (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)) n$35$$35$a6Eo (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En))) n$35$$35$a6Eo))))) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819257$35$$35$d6FP) lq_anf$36$$35$$35$7205759403792819284$35$$35$d6Gg) lq_anf$36$$35$$35$7205759403792819257$35$$35$d6FP) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3xF$35$$35$a6Ep) (Test2.S n_a3xF$35$$35$a6Ep)) (ite (is-Test2.Z n_a3xF$35$$35$a6Ep) (Test2.S n_a3xF$35$$35$a6Ep) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3xF$35$$35$a6Ep)) (Test2.S n_a3xF$35$$35$a6Ep))))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) n_a3xF$35$$35$a6Ep) n_a3xF$35$$35$a6Ep) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819258$35$$35$d6FQ) lq_anf$36$$35$$35$7205759403792819283$35$$35$d6Gf) lq_anf$36$$35$$35$7205759403792819258$35$$35$d6FQ) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) n$35$$35$a6Eo) n$35$$35$a6Eo) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819270$35$$35$d6G2) lq_anf$36$$35$$35$7205759403792819271$35$$35$d6G3) lq_anf$36$$35$$35$7205759403792819270$35$$35$d6G2) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819268$35$$35$d6G0) lq_anf$36$$35$$35$7205759403792819273$35$$35$d6G5) lq_anf$36$$35$$35$7205759403792819268$35$$35$d6G0) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)) n$35$$35$a6Eo))) (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)) n$35$$35$a6Eo)) (= (is-Test2.Z Test2.Z) true) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819259$35$$35$d6FR) lq_anf$36$$35$$35$7205759403792819282$35$$35$d6Ge) lq_anf$36$$35$$35$7205759403792819259$35$$35$d6FR) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3xF$35$$35$a6Ep) (Test2.S Test2.Z)) (ite (is-Test2.Z n_a3xF$35$$35$a6Ep) (Test2.S Test2.Z) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3xF$35$$35$a6Ep)) (Test2.S Test2.Z))))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)) n$35$$35$a6Eo) (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)) n$35$$35$a6Eo (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En))) n$35$$35$a6Eo)))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add m$35$$35$a6En) n$35$$35$a6Eo) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)) n$35$$35$a6Eo))) (= (is-Test2.Z (Test2.S n_a3xF$35$$35$a6Ep)) false) (= (is-Test2.S (Test2.S n_a3xF$35$$35$a6Ep)) true) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) (Test2.S n_a3xF$35$$35$a6Ep)) (Test2.S n_a3xF$35$$35$a6Ep)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) (Test2.S n$35$$35$a6Eo)) (Test2.S n$35$$35$a6Eo)) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) n_a3xF$35$$35$a6Ep) (ite (is-Test2.Z n$35$$35$a6Eo) n_a3xF$35$$35$a6Ep (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6Eo)) n_a3xF$35$$35$a6Ep)))) (= (is-Test2.S (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)) n$35$$35$a6Eo))) true) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) (Test2.S Test2.Z)) (ite (is-Test2.Z n$35$$35$a6Eo) (Test2.S Test2.Z) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6Eo)) (Test2.S Test2.Z))))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n$35$$35$a6Eo) n$35$$35$a6Eo) (ite (is-Test2.Z n$35$$35$a6Eo) n$35$$35$a6Eo (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n$35$$35$a6Eo)) n$35$$35$a6Eo)))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) (Test2.S Test2.Z)) (Test2.S Test2.Z)) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819264$35$$35$d6FW) lq_anf$36$$35$$35$7205759403792819277$35$$35$d6G9) lq_anf$36$$35$$35$7205759403792819264$35$$35$d6FW) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3xF$35$$35$a6Ep) n_a3xF$35$$35$a6Ep) (ite (is-Test2.Z n_a3xF$35$$35$a6Ep) n_a3xF$35$$35$a6Ep (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3xF$35$$35$a6Ep)) n_a3xF$35$$35$a6Ep)))) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819265$35$$35$d6FX) lq_anf$36$$35$$35$7205759403792819276$35$$35$d6G8) lq_anf$36$$35$$35$7205759403792819265$35$$35$d6FX) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819261$35$$35$d6FT) lq_anf$36$$35$$35$7205759403792819280$35$$35$d6Gc) lq_anf$36$$35$$35$7205759403792819261$35$$35$d6FT) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819263$35$$35$d6FV) lq_anf$36$$35$$35$7205759403792819278$35$$35$d6Ga) lq_anf$36$$35$$35$7205759403792819263$35$$35$d6FV) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add n_a3xF$35$$35$a6Ep) (Test2.S n$35$$35$a6Eo)) (ite (is-Test2.Z n_a3xF$35$$35$a6Ep) (Test2.S n$35$$35$a6Eo) (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 n_a3xF$35$$35$a6Ep)) (Test2.S n$35$$35$a6Eo))))) (= (apply$35$$35$24 (apply$35$$35$20 Test2.add Test2.Z) Test2.Z) Test2.Z) (= (apply$35$$35$1 (as is$36$GHC.Types.$91$$93$ Int) (as GHC.Types.$91$$93$ Int)) true) (= (apply$35$$35$0 (apply$35$$35$0 Proof.$38$$38$$38$ lq_anf$36$$35$$35$7205759403792819267$35$$35$d6FZ) lq_anf$36$$35$$35$7205759403792819274$35$$35$d6G6) lq_anf$36$$35$$35$7205759403792819267$35$$35$d6FZ) (= (is-Test2.S (Test2.S (ite (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)) n$35$$35$a6Eo (Test2.S (apply$35$$35$24 (apply$35$$35$20 Test2.add (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En))) n$35$$35$a6Eo))))) true) (= (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 (Test2.S n_a3xF$35$$35$a6Ep)) n_a3xF$35$$35$a6Ep) (= Proof.trivial GHC.Tuple.$40$$41$) (= (apply$35$$35$1 (as isJust Int) (as GHC.Maybe.Nothing Int)) false) (= (is-Test2.Z (Test2.S n$35$$35$a6Eo)) false) (= (is-Test2.S (Test2.S n$35$$35$a6Eo)) true)))
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n$35$$35$a6Eo)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n$35$$35$a6Eo))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z n_a3xF$35$$35$a6Ep)))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z n_a3xF$35$$35$a6Ep))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En))))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (not false))
(check-sat)
; SMT Says: Sat
(pop 1)
(push 1)
(assert (is-Test2.Z (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 m$35$$35$a6En)))
(check-sat)
; SMT Says: Sat
(pop 1)
(pop 1)
(pop 1)
(pop 1)
(pop 1)
