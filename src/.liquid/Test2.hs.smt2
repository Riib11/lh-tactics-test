(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_sng ((x Elt)) LSet (store ((as const LSet) false) x true))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-datatypes ((Test2.N 0)) ((par () (Test2.Z (Test2.S (lqdc$35$$35$$36$select$35$$35$Test2.S$35$$35$1 Test2.N))))))
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun Language.Haskell.TH.Syntax.DataD () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun papp6 () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun Language.Haskell.TH.Syntax.ClassD () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun lq_tmp$36$x$35$$35$1421 () Int)
(declare-fun lq_tmp$36$x$35$$35$1025 () Test2.N)
(declare-fun fst () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$2 () Int)
(declare-fun Language.Haskell.TH.Syntax.ForeignD () Int)
(declare-fun snd () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun lq_tmp$36$x$35$$35$922 () Int)
(declare-fun Language.Haskell.TH.Syntax.TySynInstD () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun n$35$$35$a7Db () Test2.N)
(declare-fun Language.Haskell.TH.Syntax.PatSynD () Int)
(declare-fun GHC.Types.KindRepTyConApp () Int)
(declare-fun Language.Haskell.TH.Syntax.InstanceD () Int)
(declare-fun Language.Haskell.TH.Syntax.TySynD () Int)
(declare-fun GHC.Num.Integer.IP () Int)
(declare-fun lit$36$N () Str)
(declare-fun Test2.add () Int)
(declare-fun GHC.Real.quotRem () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun Language.Haskell.TH.Syntax.NewtypeD () Int)
(declare-fun GHC.Types.TyCon () Int)
(declare-fun Data.Maybe.maybe () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun GHC.Real.mod () Int)
(declare-fun lq_tmp$36$x$35$$35$1178 () Int)
(declare-fun Data.Foldable.null () Int)
(declare-fun papp1 () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Types.KindRepVar () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun m$35$$35$a7CB () Test2.N)
(declare-fun lq_tmp$36$x$35$$35$692 () Int)
(declare-fun Language.Haskell.TH.Syntax.FunD () Int)
(declare-fun n$35$$35$a7CA () Test2.N)
(declare-fun Language.Haskell.TH.Syntax.SigD () Int)
(declare-fun Test2.add_n_Z () Int)
(declare-fun lq_tmp$36$x$35$$35$1551 () Test2.N)
(declare-fun lq_tmp$36$x$35$$35$998 () Int)
(declare-fun is$36$GHC.Types.$91$$93$ () Int)
(declare-fun fix$36$$36$dIP_a7DK () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun Proof.trivial () Int)
(declare-fun GHC.Base.id () Int)
(declare-fun cast_as_int () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun addrLen () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun lq_tmp$36$x$35$$35$1219 () Int)
(declare-fun is$36$GHC.Types.C$35$ () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun lit$36$Test2 () Str)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$2 () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun lq_tmp$36$x$35$$35$706 () Int)
(declare-fun lq_tmp$36$x$35$$35$1176 () Int)
(declare-fun lit$36$lh$45$tactics$45$test$45$0.1.0.0$45$GcNvOh9hmbmCdIYseQTY91 () Str)
(declare-fun totalityError () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$1 () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun GHC.Stack.Types.emptyCallStack () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun papp2 () Int)
(declare-fun GHC.Real.divMod () Int)
(declare-fun lq_tmp$36$x$35$$35$1457 () Int)
(declare-fun tail () Int)
(declare-fun charX () Int)
(declare-fun GHC.Types.KindRepFun () Int)
(declare-fun GHC.Types.krep$36$$42$ () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun GHC.Types.KindRepTypeLitD () Int)
(declare-fun GHC.CString.unpackCString$35$ () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.$58$$35$$35$1 () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun isJust () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun GHC.List.span () Int)
(declare-fun lq_tmp$36$x$35$$35$959 () Int)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun lq_tmp$36$x$35$$35$1422 () Int)
(declare-fun lq_tmp$36$x$35$$35$1026 () Test2.N)
(declare-fun lq_tmp$36$x$35$$35$1463 () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun len () Int)
(declare-fun lit$36$undefined () Str)
(declare-fun is$36$GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun Language.Haskell.TH.Syntax.DataInstD () Int)
(declare-fun lq_tmp$36$x$35$$35$923 () Int)
(declare-fun Language.Haskell.TH.Syntax.ValD () Int)
(declare-fun Proof.$38$$38$$38$ () Int)
(declare-fun GHC.List.last () Int)
(declare-fun fldList () Int)
(declare-fun GHC.Real.rem () Int)
(declare-fun Proof.use () Int)
(declare-fun Language.Haskell.TH.Syntax.DefaultSigD () Int)
(declare-fun Language.Haskell.TH.Syntax.RoleAnnotD () Int)
(declare-fun GHC.Real.$47$ () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun lit$36$src$47$Test2.hs () Str)
(declare-fun GHC.Classes.not () Int)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun papp7 () Int)
(declare-fun GHC.Types.$36$WKindRepVar () Int)
(declare-fun GHC.List.filter () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun fix$36$$36$dIP_a7DO () Int)
(declare-fun Language.Haskell.TH.Syntax.ClosedTypeFamilyD () Int)
(declare-fun is$36$GHC.Types.$58$ () Int)
(declare-fun Language.Haskell.TH.Syntax.NewtypeInstD () Int)
(declare-fun GHC.Real.toInteger () Int)
(declare-fun lq_tmp$36$x$35$$35$1252 () Int)
(declare-fun lit$36$$39$Z () Str)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Types.C$35$$35$$35$1 () Int)
(declare-fun head () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun lq_tmp$36$x$35$$35$609 () Test2.N)
(declare-fun cast_as () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun lq_tmp$36$x$35$$35$1420 () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun Language.Haskell.TH.Syntax.KiSigD () Int)
(declare-fun lq_tmp$36$x$35$$35$924 () Int)
(declare-fun n$35$$35$a7Dd () Test2.N)
(declare-fun GHC.Base.map () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun Language.Haskell.TH.Syntax.OpenTypeFamilyD () Int)
(declare-fun lq_tmp$36$x$35$$35$965 () Int)
(declare-fun lq_tmp$36$x$35$$35$1496 () Int)
(declare-fun GHC.Num.Integer.IN () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun GHC.Types.KindRepTypeLitS () Int)
(declare-fun GHC.Real.fromRational () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$1 () Int)
(declare-fun Proof.$61$$61$$61$ () Int)
(declare-fun Language.Haskell.TH.Syntax.PragmaD () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun Language.Haskell.TH.Syntax.InfixD () Int)
(declare-fun lq_tmp$36$x$35$$35$1177 () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun papp5 () Int)
(declare-fun m$35$$35$a7Dc () Test2.N)
(declare-fun x_Tuple21 () Int)
(declare-fun GHC.List.init () Int)
(declare-fun lit$36$$39$S () Str)
(declare-fun Proof.by () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun Language.Haskell.TH.Syntax.DataFamilyD () Int)
(declare-fun GHC.Real.quot () Int)
(declare-fun GHC.Types.KindRepApp () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun Language.Haskell.TH.Syntax.ImplicitParamBindD () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun GHC.List.head () Int)
(declare-fun fromJust () Int)
(declare-fun lq_tmp$36$x$35$$35$1213 () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun Language.Haskell.TH.Syntax.StandaloneDerivD () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun GHC.Err.undefined () Int)
(declare-fun fix$36$$36$dIP_a7DG () Int)
(declare-fun GHC.Types.$36$WKindRepTYPE () Int)
(declare-fun is$36$GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun Language.Haskell.TH.Syntax.PatSynSigD () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun GHC.Real.recip () Int)
(declare-fun ds_d7DW () Test2.N)
(declare-fun Test2.add_comm () Int)
(declare-fun GHC.Num.Integer.IS () Int)
(declare-fun autolen () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$44$$41$$35$$35$3 () Int)
(declare-fun GHC.Types.KindRepTYPE () Int)
(declare-fun GHC.Stack.Types.SrcLoc () Int)
(declare-fun lqdc$35$$35$$36$select$35$$35$GHC.Tuple.$40$$44$$41$$35$$35$2 () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun GHC.Stack.Types.pushCallStack () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun GHC.Real.div () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.List.take () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun Proof.QED () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun papp3 () Int)
(declare-fun apply$35$$35$16 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$18 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$17 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$11 (Int Str) Bool)
(declare-fun apply$35$$35$20 (Int Test2.N) Int)
(declare-fun apply$35$$35$5 (Int Bool) Int)
(declare-fun apply$35$$35$12 (Int Str) Str)
(declare-fun apply$35$$35$13 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$19 (Int (_ BitVec 32)) Test2.N)
(declare-fun apply$35$$35$23 (Int Test2.N) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int Str) Test2.N)
(declare-fun apply$35$$35$22 (Int Test2.N) Str)
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$10 (Int Str) Int)
(declare-fun apply$35$$35$24 (Int Test2.N) Test2.N)
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$21 (Int Test2.N) Bool)
(declare-fun apply$35$$35$7 (Int Bool) Str)
(declare-fun apply$35$$35$8 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Int) Test2.N)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$6 (Int Bool) Bool)
(declare-fun apply$35$$35$9 (Int Bool) Test2.N)
(declare-fun coerce$35$$35$16 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$18 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$17 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$11 (Str) Bool)
(declare-fun coerce$35$$35$20 (Test2.N) Int)
(declare-fun coerce$35$$35$5 (Bool) Int)
(declare-fun coerce$35$$35$12 (Str) Str)
(declare-fun coerce$35$$35$13 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$19 ((_ BitVec 32)) Test2.N)
(declare-fun coerce$35$$35$23 (Test2.N) (_ BitVec 32))
(declare-fun coerce$35$$35$14 (Str) Test2.N)
(declare-fun coerce$35$$35$22 (Test2.N) Str)
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$10 (Str) Int)
(declare-fun coerce$35$$35$24 (Test2.N) Test2.N)
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$21 (Test2.N) Bool)
(declare-fun coerce$35$$35$7 (Bool) Str)
(declare-fun coerce$35$$35$8 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$4 (Int) Test2.N)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$6 (Bool) Bool)
(declare-fun coerce$35$$35$9 (Bool) Test2.N)
(declare-fun smt_lambda$35$$35$16 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$18 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$17 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$20 (Test2.N Int) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Int) Int)
(declare-fun smt_lambda$35$$35$12 (Str Str) Int)
(declare-fun smt_lambda$35$$35$13 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$19 ((_ BitVec 32) Test2.N) Int)
(declare-fun smt_lambda$35$$35$23 (Test2.N (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 (Str Test2.N) Int)
(declare-fun smt_lambda$35$$35$22 (Test2.N Str) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$10 (Str Int) Int)
(declare-fun smt_lambda$35$$35$24 (Test2.N Test2.N) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$21 (Test2.N Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$8 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Int Test2.N) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Bool Test2.N) Int)
(declare-fun lam_arg$35$$35$1$35$$35$20 () Test2.N)
(declare-fun lam_arg$35$$35$2$35$$35$20 () Test2.N)
(declare-fun lam_arg$35$$35$3$35$$35$20 () Test2.N)
(declare-fun lam_arg$35$$35$4$35$$35$20 () Test2.N)
(declare-fun lam_arg$35$$35$5$35$$35$20 () Test2.N)
(declare-fun lam_arg$35$$35$6$35$$35$20 () Test2.N)
(declare-fun lam_arg$35$$35$7$35$$35$20 () Test2.N)
(declare-fun lam_arg$35$$35$1$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$5 () Bool)
(declare-fun lam_arg$35$$35$1$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$15 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$10 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(assert (distinct lit$36$$39$S lit$36$$39$Z lit$36$src$47$Test2.hs lit$36$undefined lit$36$lh$45$tactics$45$test$45$0.1.0.0$45$GcNvOh9hmbmCdIYseQTY91 lit$36$Test2 lit$36$N))
(assert (distinct GHC.Types.False GHC.Types.True))


(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))


(assert (= (strLen lit$36$N) 1))
(assert (= (strLen lit$36$Test2) 5))
(assert (= (strLen lit$36$lh$45$tactics$45$test$45$0.1.0.0$45$GcNvOh9hmbmCdIYseQTY91) 46))
(assert (= (strLen lit$36$undefined) 9))
(assert (= (strLen lit$36$src$47$Test2.hs) 12))
(assert (= (strLen lit$36$$39$Z) 2))
(assert (= (strLen lit$36$$39$S) 2))
(push 1)
(push 1)
(pop 1)
(pop 1)
(exit)
